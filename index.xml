<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cup Air</title>
    <link>http://acupofair.github.io/</link>
    <description>Recent content on Cup Air</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 30 Jan 2022 22:36:50 +0800</lastBuildDate><atom:link href="http://acupofair.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Birthday 22</title>
      <link>http://acupofair.github.io/posts/life_is_poem/birth22/</link>
      <pubDate>Sun, 30 Jan 2022 22:36:50 +0800</pubDate>
      
      <guid>http://acupofair.github.io/posts/life_is_poem/birth22/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;就这样22岁了。这是一个在法律上可以支撑起家庭的年纪，兄弟，我希望你真的可以。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;


&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/cover.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;
今天也是除夕，这篇写了又删，去了又来的博文，祝大家新年快乐，祝家人身体健康，祝我也要开心充实~&lt;/p&gt;
&lt;p&gt;君不见外州客&lt;/p&gt;
&lt;p&gt;长安道，一回来，一回老&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Year2022</title>
      <link>http://acupofair.github.io/posts/new_years/year2022/</link>
      <pubDate>Sat, 01 Jan 2022 00:14:08 +0800</pubDate>
      
      <guid>http://acupofair.github.io/posts/new_years/year2022/</guid>
      <description>&lt;p&gt;🆕2022年啦，新年快乐🥳!(no more)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>编译原理：语言与文法</title>
      <link>http://acupofair.github.io/posts/compile/lang_grammar/</link>
      <pubDate>Fri, 31 Dec 2021 15:18:49 +0800</pubDate>
      
      <guid>http://acupofair.github.io/posts/compile/lang_grammar/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;🐉2021 年与龙书斗争的第一天与最后一天&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;第二章-语言与文法&#34;&gt;
  第二章 语言与文法
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ac%ac%e4%ba%8c%e7%ab%a0-%e8%af%ad%e8%a8%80%e4%b8%8e%e6%96%87%e6%b3%95&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id=&#34;语言&#34;&gt;
  语言
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%af%ad%e8%a8%80&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;字母表与符号&#34;&gt;
  字母表与符号
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%ad%97%e6%af%8d%e8%a1%a8%e4%b8%8e%e7%ac%a6%e5%8f%b7&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;符号&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;定义&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;符号&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;一般小写字母,符号与数字&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;语言中不可再分的单位&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$a,b,c,+,-, 0,7,8$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;字母表&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;大些字母&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;符号的非空有穷集合&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$\Sigma = \{a, b, c, +, -, 1, 2, &amp;hellip;9\}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;符号串(字符串)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用希腊小写字符表示&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;某字母表上的符号的&lt;strong&gt;有穷序列&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$abc, +3, &amp;hellip;$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;语句&#34;&gt;
  语句
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%af%ad%e5%8f%a5&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;语句：字母表上符合某种&lt;strong&gt;构成规则&lt;/strong&gt;的符号串序列&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is a pig.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语言：某字母表上句子的集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;符号串&lt;strong&gt;集合&lt;/strong&gt;的积&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$ A=\{ \alpha_1, \alpha_2, &amp;hellip;\} $, $B=\{ \beta_1, \beta_2, &amp;hellip;\}$,两者笛卡尔积为$AB = \{ \alpha\beta  | \alpha \in A, \beta \in B \}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串&lt;strong&gt;集合&lt;/strong&gt;的幂&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$A^0 = \{ \epsilon \}$&lt;/li&gt;
&lt;li&gt;$A^n = AA^{n-1}$&lt;/li&gt;
&lt;li&gt;if $|A| = m$, then $|A^0|=1, |A^1|=m, |A^n|=m^n$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kleene 闭包&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$A^* = A^0 \cup A^1 \cup A^2 \cup &amp;hellip; $
&lt;blockquote&gt;
&lt;p&gt;$\{ a, b \}^* = \{ \epsilon, a, b, aa, ab, ba, bb, aaa, aab, aba, &amp;hellip; \}$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正闭包&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$A^+ = A^1 \cup A^2 \cup &amp;hellip;  = A^* - \{ \epsilon \}$
&lt;blockquote&gt;
&lt;p&gt;$\{ a, b \}^+ = \{ a, b, aa, ab, ba, bb, aaa, aab, aba, &amp;hellip; \}$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个语言一定是其字母表上闭包的子集&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文法&#34;&gt;
  文法
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%96%87%e6%b3%95&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文法：表示语言构成规则的形式化方法&lt;/li&gt;
&lt;li&gt;产生式
&lt;ul&gt;
&lt;li&gt;$&amp;lt;句子&amp;gt; \rightarrow &amp;lt;主语&amp;gt;&amp;lt;谓语&amp;gt;&amp;lt;宾语&amp;gt; $&lt;/li&gt;
&lt;li&gt;$&amp;lt;主语&amp;gt; \rightarrow &amp;lt;形容词&amp;gt;&amp;lt;名词&amp;gt; $&lt;/li&gt;
&lt;li&gt;$&amp;lt;谓语&amp;gt; \rightarrow &amp;lt;动词&amp;gt;$&lt;/li&gt;
&lt;li&gt;$&amp;lt;宾语&amp;gt; \rightarrow &amp;lt;形容词&amp;gt;&amp;lt;名词&amp;gt; $&lt;/li&gt;
&lt;li&gt;$&amp;lt;形容词&amp;gt; \rightarrow young | pop$&lt;/li&gt;
&lt;li&gt;$&amp;lt;名词&amp;gt; \rightarrow men | music$&lt;/li&gt;
&lt;li&gt;$&amp;lt;动词&amp;gt; \rightarrow like$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;产生式文法的组成
&lt;ul&gt;
&lt;li&gt;非终结符($V_N$)&lt;/li&gt;
&lt;li&gt;终结符($V_T$)&lt;/li&gt;
&lt;li&gt;开始符号（$S$)&lt;/li&gt;
&lt;li&gt;产生式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推导：由产生式推导出句子&lt;/li&gt;
&lt;li&gt;归约：由句子归约得出语法



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2022-01-02-13-48-13.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;句型：由语法树末端符（叶节点）从左到右连成串是文法的一个句型&lt;/li&gt;
&lt;li&gt;句子：仅含终结符的句型&lt;/li&gt;
&lt;li&gt;语言：由S推导所得的句子的集合&lt;/li&gt;
&lt;li&gt;短语：子树末端符号从左到右连成串相对于子树树根而言称为短语&lt;/li&gt;
&lt;li&gt;简单短语/直接短语：子树根经过一步推导得到的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;句柄&lt;/strong&gt;：句型中&lt;strong&gt;最左简单短语&lt;/strong&gt;



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2022-01-02-15-35-37.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;由文法产生语言&#34;&gt;
  由文法产生语言
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%94%b1%e6%96%87%e6%b3%95%e4%ba%a7%e7%94%9f%e8%af%ad%e8%a8%80&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;由语言构造文法&#34;&gt;
  由语言构造文法
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%94%b1%e8%af%ad%e8%a8%80%e6%9e%84%e9%80%a0%e6%96%87%e6%b3%95&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;&amp;hellip;这太慢了，换个策略，直接看完ppt,然后写点重点总结&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>软件体系结构核心点复习</title>
      <link>http://acupofair.github.io/posts/software_arch/sa_core/</link>
      <pubDate>Wed, 29 Dec 2021 14:11:58 +0800</pubDate>
      
      <guid>http://acupofair.github.io/posts/software_arch/sa_core/</guid>
      <description>&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;👨‍🦲 尝试用一下午复习完一学期与乌龟，包包，平板，睡觉，以及一众大作业共存的软件体系结构课内容&lt;/li&gt;
&lt;li&gt;👍 本文主要参考&lt;a href=&#34;https://leibudao.github.io/posts/safinalexam/&#34;&gt;Run 的笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;软件体系结构核心复习预习&#34;&gt;
  软件体系结构核心&lt;del&gt;复习&lt;/del&gt;预习
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%bd%af%e4%bb%b6%e4%bd%93%e7%b3%bb%e7%bb%93%e6%9e%84%e6%a0%b8%e5%bf%83%e5%a4%8d%e4%b9%a0%e9%a2%84%e4%b9%a0&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id=&#34;第二章-软件架构定义&#34;&gt;
  第二章 软件架构定义
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ac%ac%e4%ba%8c%e7%ab%a0-%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e5%ae%9a%e4%b9%89&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;组成派定义&#34;&gt;
  组成派定义
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%bb%84%e6%88%90%e6%b4%be%e5%ae%9a%e4%b9%89&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;组成派关注软件本身，将软件架构看作组件和交互的集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1992 Dewayne Perry &amp;amp; Alexander Wolf 版本：软件架构={元素，组成，原理}
&lt;ul&gt;
&lt;li&gt;架构元素：处理元素，数据元素，连接元素&lt;/li&gt;
&lt;li&gt;架构组成：由加权的属性和关系构成。属性约束架构元素选择，关系约束架构元素放置&lt;/li&gt;
&lt;li&gt;架构原理：捕获选择架构风格，元素和形式的选择动机（什么牛马玩意）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1993 Mary Shaw &amp;amp; David Garlan 定义：软件架构包括组件，连接件和约束三大要素
&lt;ul&gt;
&lt;li&gt;组件：一串代码也可为独立程序&lt;/li&gt;
&lt;li&gt;连接件：过程调用，管道和消息等，用于表示组件之间的相互关系&lt;/li&gt;
&lt;li&gt;约束：组件连接时的条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;决策派定义&#34;&gt;
  决策派定义
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%86%b3%e7%ad%96%e6%b4%be%e5%ae%9a%e4%b9%89&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;决策派关注软件架构中的实体（人）， 将软件架构视为一系列重要设计决策的集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1999 Booch , Rumbaugh &amp;amp; Jacobson:软件架构是一系列重要决策的集合，这些决策关于
&lt;ul&gt;
&lt;li&gt;软件系统的组织&lt;/li&gt;
&lt;li&gt;支持系统的结构元素和它们之间的接口，以及当这些元素相互协作时所体现的行为&lt;/li&gt;
&lt;li&gt;如何组合这些元素，使他们逐渐合成为更大的子系统&lt;/li&gt;
&lt;li&gt;架构风格&lt;/li&gt;
&lt;li&gt;这些元素以及它们的接口，协作和组合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;参考定义框架一般性定义&#34;&gt;
  参考定义框架（一般性定义）
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8f%82%e8%80%83%e5%ae%9a%e4%b9%89%e6%a1%86%e6%9e%b6%e4%b8%80%e8%88%ac%e6%80%a7%e5%ae%9a%e4%b9%89&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;软件架构一般由以下五种元素构成：组件，连接件，配置，端口，角色&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;


&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-29-15-01-05.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组件：具有某种功能的可重用的软件模块单元，表示了系统中主要的计算单元和数据存储&lt;/li&gt;
&lt;li&gt;连接件：表示组件之间的交互
&lt;ul&gt;
&lt;li&gt;简单的连接件：管道，过程调用，事件广播 etc&lt;/li&gt;
&lt;li&gt;复杂的：客户-服务器通信协议，数据库与应用的 SQL 连接等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配置：表示了组件和连接件的拓扑逻辑和约束&lt;/li&gt;
&lt;li&gt;端口：组件与外部交互只能通过其接口，组件的接口由一组端口组成，每个端口表示组件与外部环境的交汇点
简单的端口：过程调用
复杂的：通信协议&lt;/li&gt;
&lt;li&gt;角色：连接件的接口由一组角色组成，连接件的每个角色定义该连接件表示的交互的参与者。例子
&lt;ul&gt;
&lt;li&gt;二元连接件由两个角色
&lt;ul&gt;
&lt;li&gt;RPC 角色：caller 和 callee&lt;/li&gt;
&lt;li&gt;pipe 角色：reading 和 writing&lt;/li&gt;
&lt;li&gt;消息传递的角色：sender 和 receiver&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事件广播有一个事件发布者以及任意多个事件接收者角色&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第三章-软件架构模型&#34;&gt;
  第三章 软件架构模型
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ac%ac%e4%b8%89%e7%ab%a0-%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e6%a8%a1%e5%9e%8b&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;软件架构建模的五类方法及其优缺点&#34;&gt;
  软件架构建模的五类方法（及其优缺点）
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e5%bb%ba%e6%a8%a1%e7%9a%84%e4%ba%94%e7%b1%bb%e6%96%b9%e6%b3%95%e5%8f%8a%e5%85%b6%e4%bc%98%e7%bc%ba%e7%82%b9&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基于非规范的图形表示的建模方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正式图形表示：有严格定义的结构
&lt;ul&gt;
&lt;li&gt;树形结构
&lt;ul&gt;
&lt;li&gt;树地图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改进的树地图
&lt;ul&gt;
&lt;li&gt;冰块图&lt;/li&gt;
&lt;li&gt;旭日图&lt;/li&gt;
&lt;li&gt;双曲树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非正式图形表示：不具有严格的标准。如盒线图，PowerPoint 风格图像？？？&lt;/li&gt;
&lt;li&gt;问题：无法表示叶子节点间的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于 UML 的建模方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用 UML 建模的三种方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将 UML 看作是一种软件架构描述语言直接对架构建模。&lt;/li&gt;
&lt;li&gt;通过扩展机制约束 UML 的元模型以支持软件架构模型的需要。&lt;/li&gt;
&lt;li&gt;对 UML 的元模型进行扩充。
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;-&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;架构元素&lt;/th&gt;
&lt;th&gt;UML 模型组件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;组件&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分类器（如类、组件、节点、用例等）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;接口&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;接口&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;关系（连接器）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;关系（如泛化、关联、依赖等）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;约束（规则）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;规则&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题：只是针对特定的面向对象的架构，比如对架构缺少形式化的支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对架构的构造性不强&lt;/li&gt;
&lt;li&gt;虽使用交互图，状态图和活动图描述系统行为，但语义精确性不足&lt;/li&gt;
&lt;li&gt;UML 多视图建模产生信息冗余和不一致&lt;/li&gt;
&lt;li&gt;对架构的建模只能到达非形式化的层次，不能保证软件开发过程的可靠性，不能充分体系架构的本质&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于形式化的建模方法（考到就认了）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Z 语言&lt;/li&gt;
&lt;li&gt;过滤器模式&lt;/li&gt;
&lt;li&gt;Petri 网&lt;/li&gt;
&lt;li&gt;B 语言&lt;/li&gt;
&lt;li&gt;VDM&lt;/li&gt;
&lt;li&gt;CSP：基于进程代数的描述语言,基于进程之间的关系描述，来描述一个复杂并发系统的动态交互行为特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于 UML 形式化的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他建模方法（文本语言，MDA）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;41模型&#34;&gt;
  &amp;ldquo;4+1&amp;quot;模型
  &lt;a class=&#34;heading-link&#34; href=&#34;#41%e6%a8%a1%e5%9e%8b&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;


&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-29-15-19-45.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用例视图（场景）：用例图，描述和概述图。从外部世界角度来描述正在建模的系统的功能；所有其他视图都依靠用例视图指导.&lt;/li&gt;
&lt;li&gt;逻辑视图：类图，对象图，状态图和协作图。描述系统各部分的抽象描述.&lt;/li&gt;
&lt;li&gt;过程视图：活动图，顺序图。描述系统中的进程.&lt;/li&gt;
&lt;li&gt;开发视图：包图和组件图。描述各部分如何被组织为模块和组件.&lt;/li&gt;
&lt;li&gt;物理视图：部署图。描述前三个视图中所述的系统设计实现为一族现实时间的实体.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第四章-软件架构风格堪称半本书&#34;&gt;
  第四章 软件架构风格（堪称半本书）
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ac%ac%e5%9b%9b%e7%ab%a0-%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e9%a3%8e%e6%a0%bc%e5%a0%aa%e7%a7%b0%e5%8d%8a%e6%9c%ac%e4%b9%a6&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;软件架构风格是什么&#34;&gt;
  软件架构风格是什么
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e9%a3%8e%e6%a0%bc%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;软件架构风格又称软件架构惯用模式，是描述&lt;strong&gt;某一特定应用领域&lt;/strong&gt;中系统组织方式的&lt;strong&gt;惯用模式&lt;/strong&gt;，作为“可复用的组织模式和习语”，为设计人员的交流提供了公共的术语空间，促进了&lt;strong&gt;设计复用&lt;/strong&gt;与&lt;strong&gt;代码复用&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;使用架构风格的好处&#34;&gt;
  使用架构风格的好处
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%bd%bf%e7%94%a8%e6%9e%b6%e6%9e%84%e9%a3%8e%e6%a0%bc%e7%9a%84%e5%a5%bd%e5%a4%84&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以极大的促进设计的重用性和代码的&lt;strong&gt;重用性&lt;/strong&gt;，并且使得系统的组织结构易被理解。&lt;/li&gt;
&lt;li&gt;使用标准的架构风格可较好地&lt;strong&gt;支持系统内部的互操作性&lt;/strong&gt;以及&lt;strong&gt;针对特定风格的分析&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;20-种体系结构风格的特点组件连接件约束优点缺点适用范围&#34;&gt;
  &lt;strong&gt;20 种&lt;/strong&gt;体系结构风格的特点（组件，连接件，约束），优点，缺点，适用范围
  &lt;a class=&#34;heading-link&#34; href=&#34;#20-%e7%a7%8d%e4%bd%93%e7%b3%bb%e7%bb%93%e6%9e%84%e9%a3%8e%e6%a0%bc%e7%9a%84%e7%89%b9%e7%82%b9%e7%bb%84%e4%bb%b6%e8%bf%9e%e6%8e%a5%e4%bb%b6%e7%ba%a6%e6%9d%9f%e4%bc%98%e7%82%b9%e7%bc%ba%e7%82%b9%e9%80%82%e7%94%a8%e8%8c%83%e5%9b%b4&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;1-管道过滤器风格&#34;&gt;
  1 管道过滤器风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#1-%e7%ae%a1%e9%81%93%e8%bf%87%e6%bb%a4%e5%99%a8%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本组件：过滤器（功能模块）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个过滤器组件中都封装了一个处理步骤&lt;/li&gt;
&lt;li&gt;数据源点和数据终点可以看作是特殊的过滤器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连接件：管道（数据流）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过滤器 Filter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作用：将源数据变换为目标数据&lt;/li&gt;
&lt;li&gt;变换方式：（丰富）增加、（精炼）删除、（转换）改变、分解、合并等&lt;/li&gt;
&lt;li&gt;特性：独立性
&lt;ol&gt;
&lt;li&gt;过滤器独立完成自身功能，相互之间无需进行状态交互&lt;/li&gt;
&lt;li&gt;过滤器自身无状态&lt;/li&gt;
&lt;li&gt;过滤器对其上下游的过滤器“无知”&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管道 Pipe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作用：将数据从一个过滤器的输出口转移到另一个过滤器的输入口&lt;/li&gt;
&lt;li&gt;过滤器是单向移动的。&lt;/li&gt;
&lt;li&gt;过滤器可以有缓冲区。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结果的正确性不依赖于各个过滤器运行的先后顺序&lt;/strong&gt;（完整的计算过程包含在过滤器之间的拓扑结构）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由于每个组件行为不受其他组件的影响，整个系统的行为易于理解,使软件组件具有良好的隐蔽性，高内聚低耦合。&lt;/li&gt;
&lt;li&gt;管道-过滤器风格支持&lt;strong&gt;功能模块的复用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;具有较强的&lt;strong&gt;可维护性&lt;/strong&gt;和&lt;strong&gt;可拓展性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;支持一些特定的分析，如&lt;strong&gt;吞吐量计算&lt;/strong&gt;和&lt;strong&gt;死锁检测&lt;/strong&gt;等。&lt;/li&gt;
&lt;li&gt;具有并发性。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;往往导致系统处理过程的成批操作。&lt;/li&gt;
&lt;li&gt;由于数据传输往往需要特定的出来，导致过滤器需要对数据流进行解析和反解析，&lt;strong&gt;增加了过滤器具体实现的复杂性，系统性能不高&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;交互式处理能力弱。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;改进&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加一个控制面板与用户交互&lt;/li&gt;
&lt;li&gt;加一个数据处理中心来做数据流的解析反解析，降低复杂度，提高性能



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-29-18-55-45.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用场景：数据源源不断的产生，系统需要对这些数据进行若干处理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-主程序子程序风格&#34;&gt;
  2 主程序/子程序风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#2-%e4%b8%bb%e7%a8%8b%e5%ba%8f%e5%ad%90%e7%a8%8b%e5%ba%8f%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;组件
&lt;ul&gt;
&lt;li&gt;程序和&lt;strong&gt;明确可见的数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;程序=数据结构+算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;连接件：程序调用和数据共享&lt;/li&gt;
&lt;li&gt;约束：单线程&lt;/li&gt;
&lt;li&gt;优点
&lt;ol&gt;
&lt;li&gt;结构化程序设计的典型风格，相对于非结构化设计逻辑清晰，易理解。&lt;/li&gt;
&lt;li&gt;开发过程采用逐步细化，将大系统分解为若干模块。(模块化)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;对数据存储格式的变化将会影响几乎所有的模块&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在规模变大时将会难理解,难测试，难维护。（为什么呢，都模块化了还要怎样，哪个系统大了不变得难理解难测试难维护）&lt;/li&gt;
&lt;li&gt;难以支持有效的复用。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;应用场景：它适用于可以通过过程定义的层次结构适当地定义计算的应用程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-面向对象风格&#34;&gt;
  3 面向对象风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#3-%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;特点
&lt;ol&gt;
&lt;li&gt;对象负责维护其表示的完整性(通常是通过保持其表示的一些不变式来实现的)&lt;/li&gt;
&lt;li&gt;对象的表示对其他对象而言是隐蔽的。抽象数据类型的使用，以及面向对象系统的使用已经非常普遍。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;应用场景：它适用于&lt;strong&gt;中心问题是识别和保护相关信息体（尤其是表示信息）的应用程序&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;组件：管理器（例如，servers、对象、抽象数据类型）&lt;/li&gt;
&lt;li&gt;连接件：程序调用&lt;/li&gt;
&lt;li&gt;约束：分散的,去中心化的，通常是单线程&lt;/li&gt;
&lt;li&gt;优点
&lt;ol&gt;
&lt;li&gt;对象隐藏了其实现细节，使得对象的使用变得简单方便，而且具有很高的安全性和可靠性。&lt;/li&gt;
&lt;li&gt;设计者可将一些数据存取操作的问题分解成一些交互的代理程序的集合。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ol&gt;
&lt;li&gt;管理多个对象&lt;/li&gt;
&lt;li&gt;管理许多交互&lt;/li&gt;
&lt;li&gt;行为的分布式责任&lt;/li&gt;
&lt;li&gt;捕获相关设计的族&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-层次化风格&#34;&gt;
  4 层次化风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#4-%e5%b1%82%e6%ac%a1%e5%8c%96%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;大多数分层架构的四个标准层
表现层
业务层
持久层（有时会和业务层结合在一起成为一个单独的业务层）
数据库层&lt;/li&gt;
&lt;li&gt;特点
&lt;ol&gt;
&lt;li&gt;每层为上一层提供服务，使用下一层的服务，只能见到与自己邻接的层。&lt;/li&gt;
&lt;li&gt;大的问题分解为若干渐进的小问题，逐步解决，隐藏了很多复杂度。&lt;/li&gt;
&lt;li&gt;修改一层，最多影响两层，而通常只能影响上层。接口稳固，见谁都不影响。&lt;/li&gt;
&lt;li&gt;上层必须知道下层的身份，不能调整层次之间的顺序。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;应用场景：它适用于涉及可以分层排列的不同服务类的应用程序。&lt;/li&gt;
&lt;li&gt;组件：几个水平层，每层在应用中执行特定角色。通常是复合的，例如程序的集合。&lt;/li&gt;
&lt;li&gt;连接件：取决于组件的结构；通常是在受限的可见性下进行的过程调用&lt;/li&gt;
&lt;li&gt;约束：单线程&lt;/li&gt;
&lt;li&gt;优点
&lt;ol&gt;
&lt;li&gt;支持基于可增加抽象层的设计，允许将一个复杂问题分解成一个增量步骤序列的实现。&lt;/li&gt;
&lt;li&gt;支持扩展【维护、修改比较容易】&lt;/li&gt;
&lt;li&gt;支持重用【接口稳定】&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ol&gt;
&lt;li&gt;不是所有系统都容易用这种模式来构建；&lt;/li&gt;
&lt;li&gt;定义一个合适的抽象层次可能会非常困难，特别是对于标准化的层次模型。&lt;/li&gt;
&lt;li&gt;层层相调，影响性能。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5-事件驱动风格&#34;&gt;
  5 事件驱动风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#5-%e4%ba%8b%e4%bb%b6%e9%a9%b1%e5%8a%a8%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;特点：事件的触发者并不知道哪些构件会被这些事件影响，相互保持独立。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能假定构件的处理顺序&lt;/li&gt;
&lt;li&gt;各个构件之间彼此无之间的连接关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事件调度策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有独立的事件分派模块
&lt;ul&gt;
&lt;li&gt;全广播,派遣模块将事件广播到所有模块，但只有感兴趣的才去取事件并触发自身的行为&lt;/li&gt;
&lt;li&gt;选择性广播：把事件送到那些已经注册了的模块
&lt;ul&gt;
&lt;li&gt;点对点广播：基于队列&lt;/li&gt;
&lt;li&gt;发布-订阅模型：比如 RSS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;无独立的事件分派模块（被观察者/观察者）
&lt;ul&gt;
&lt;li&gt;每个模块都允许其他模块向自己所能发送的某些消息表明兴趣&lt;/li&gt;
&lt;li&gt;当某个模块发出某一事件时，它自动将这些事件发布给那些曾经向自己注册过此事件的模块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;组件之间关联较弱，一个组件出错将不会影响其他构件。&lt;/li&gt;
&lt;li&gt;提高软件的复用能力。只要在系统事件中注册组件的过程，就可以将该组件集成到系统中。&lt;/li&gt;
&lt;li&gt;系统便于升级。只要组件名和事件中注册的过程名保持不变，原有组件就可以被新组件替代。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;组件放弃了对计算机的控制权，完全由系统决定。&lt;/li&gt;
&lt;li&gt;存在数据交换问题。&lt;/li&gt;
&lt;li&gt;该风格中，正确性验证成为一个问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6-解释器风格&#34;&gt;
  6 解释器风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#6-%e8%a7%a3%e9%87%8a%e5%99%a8%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;优点
&lt;ol&gt;
&lt;li&gt;有利于实现程序的可移植性和语言的跨平台能力。&lt;/li&gt;
&lt;li&gt;可以对未来的硬件进行模拟和仿真，降低测试所带来的复杂性和昂贵花费。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ol&gt;
&lt;li&gt;额外的间接层次导致了系统性能的下降。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;notice question&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-question&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Question
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;&lt;h4 id=&#34;解释器-vs-编译器&#34;&gt;
  解释器 vs 编译器
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%a7%a3%e9%87%8a%e5%99%a8-vs-%e7%bc%96%e8%af%91%e5%99%a8&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;编译器不会直接执行输入的源程序代码，而是翻译成另一种语言（机器码或目标码），并输入到文件中以便随后链接执行&lt;/li&gt;
&lt;li&gt;解释器直接将源代码解释执行&lt;/li&gt;
&lt;li&gt;解释器的执行速度要慢于编译器产生的目标代码的执行速度，但低于编译器编译，链接，执行的总时间&lt;/li&gt;
&lt;li&gt;解释器对内存的分配是在解释时进行，编译器是在编译时进行&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&#34;7-基于规则的系统风格考到我认&#34;&gt;
  7 基于规则的系统风格（考到我认🖕)
  &lt;a class=&#34;heading-link&#34; href=&#34;#7-%e5%9f%ba%e4%ba%8e%e8%a7%84%e5%88%99%e7%9a%84%e7%b3%bb%e7%bb%9f%e9%a3%8e%e6%a0%bc%e8%80%83%e5%88%b0%e6%88%91%e8%ae%a4&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;优点
&lt;ol&gt;
&lt;li&gt;降低了修改业务逻辑的成本。&lt;/li&gt;
&lt;li&gt;缩短了开发时间。&lt;/li&gt;
&lt;li&gt;将规则外部化，可在多个应用之间共享。&lt;/li&gt;
&lt;li&gt;对规则的改变将会非常迅速并且具有较低的风险。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ol&gt;
&lt;li&gt;额外的间接层次导致了系统性能的下降。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;8-仓库风格&#34;&gt;
  8 仓库风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#8-%e4%bb%93%e5%ba%93%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中心数据结构组件，表示当前数据的状态。&lt;/li&gt;
&lt;li&gt;相对独立的组件集合，各个功能模块（子系统）等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连接件：数据仓库与独立组件之间的交互&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由输入流中事务触发系统相应的进程执行$\rightarrow$数据库型知识库。&lt;/li&gt;
&lt;li&gt;由中心数据结构的当前状态触发系统相应的进程执行$\rightarrow$黑板知识库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;notice question&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-question&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Question
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;这两触发我不太理解&lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;应用场景：应用于核心问题是建立、扩充和维护一个复杂的中央信息体的情况。
&lt;ul&gt;
&lt;li&gt;数据处理，主要需要用传统的数据库来搭建业务决策系统。&lt;/li&gt;
&lt;li&gt;软件开发环境，主要需要表示和操作相关的程序和设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优点
&lt;ol&gt;
&lt;li&gt;便于模块间的数据共享。&lt;/li&gt;
&lt;li&gt;方便模块的添加、更新和删除。&lt;/li&gt;
&lt;li&gt;避免了知识源的不必要的重复存储等。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ol&gt;
&lt;li&gt;对于各个模块，需要一定的同步/加锁机制保证数据结构的完整性和一致性等。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;9-黑板系统风格&#34;&gt;
  9 黑板系统风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#9-%e9%bb%91%e6%9d%bf%e7%b3%bb%e7%bb%9f%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;组成部分
&lt;ul&gt;
&lt;li&gt;知识源：由条件和动作组成。条件满足，知识源被触发，其动作部分增加或修改黑板上的内容&lt;/li&gt;
&lt;li&gt;黑板数据结构(各种知识源之间的通讯和交互只通过黑板进行)&lt;/li&gt;
&lt;li&gt;控制器：时刻监视黑板状态变化



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-29-20-32-49.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优点
&lt;ol&gt;
&lt;li&gt;便于多客户共享大量数据。&lt;/li&gt;
&lt;li&gt;即便于添加新的作为知识源代理的应用程序，也便于扩展共享的黑板数据结构。&lt;/li&gt;
&lt;li&gt;知识源可重用。&lt;/li&gt;
&lt;li&gt;支持容错性和健壮性。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ol&gt;
&lt;li&gt;不同的知识源代理对于共享数据结构要达成一致，这也造成了对黑板数据结构的修改较为困难—要考虑到各个代理的调用。&lt;/li&gt;
&lt;li&gt;需要一定的同步/加锁机制保证数据结构的完整性和一致性，增大了系统复杂度。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;10-c2-风格属于层次体系架构风格&#34;&gt;
  10 C2 风格（属于层次体系架构风格）
  &lt;a class=&#34;heading-link&#34; href=&#34;#10-c2-%e9%a3%8e%e6%a0%bc%e5%b1%9e%e4%ba%8e%e5%b1%82%e6%ac%a1%e4%bd%93%e7%b3%bb%e6%9e%b6%e6%9e%84%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;可以概括为通过连接件绑定在一起的按照一组规则运作的&lt;strong&gt;并行组件网络&lt;/strong&gt;。该规则规定了所有组件之间的交互必须通过&lt;strong&gt;异步消息机制&lt;/strong&gt;来实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;


&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-29-20-49-58.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连接件：负责把构件绑定在一起，其上可连任意数目的构件和连接件；主要指责：
&lt;ul&gt;
&lt;li&gt;消息的路由&lt;/li&gt;
&lt;li&gt;消息的过滤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特点
&lt;ul&gt;
&lt;li&gt;组件和连接件的顶部与底部互相连接&lt;/li&gt;
&lt;li&gt;C2 构件内部，通信和处理是分开的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;优点
&lt;ol&gt;
&lt;li&gt;可使用任何编程语言开发组件，组件重用和替换易实现。&lt;/li&gt;
&lt;li&gt;组件相互独立，依赖较小，具有一定的扩展能力，可支持不同粒度的组件。&lt;/li&gt;
&lt;li&gt;组件不需要共享地址空间。&lt;/li&gt;
&lt;li&gt;可实现多个用户和多个系统之间的交互。&lt;/li&gt;
&lt;li&gt;可使用多个工具集和多媒体类型，动态更新系统框架结构。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ol&gt;
&lt;li&gt;不太适合大规模流式风格系统&lt;/li&gt;
&lt;li&gt;对数据库使用比较频繁的使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;应用场景
&lt;ul&gt;
&lt;li&gt;由于其基于组件和消息的架构风格，很适合用于 GUI 软件开发，构建灵活和可扩展的应用系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;11-cs-风格&#34;&gt;
  11 C/S 风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#11-cs-%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;h4 id=&#34;12-bs-风格&#34;&gt;
  12 B/S 风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#12-bs-%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;h4 id=&#34;13-平台插件风格&#34;&gt;
  13 平台/插件风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#13-%e5%b9%b3%e5%8f%b0%e6%8f%92%e4%bb%b6%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;优点
&lt;ol&gt;
&lt;li&gt;降低系统各模块之间的互依赖性。&lt;/li&gt;
&lt;li&gt;系统模块独立开发、部署、维护。&lt;/li&gt;
&lt;li&gt;根据需求动态的组装、分离系统。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ol&gt;
&lt;li&gt;插件是别人开发的可以用到某主程序中的，只服务于该主程序，可重用性差。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;14-面向-agent-风格&#34;&gt;
  14 面向 Agent 风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#14-%e9%9d%a2%e5%90%91-agent-%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;优点
&lt;ol&gt;
&lt;li&gt;面向 Agent 的软件工程方法对于解决复杂问题是一种好的技术，特别是对于分布开放异构的软件环境。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ol&gt;
&lt;li&gt;大多数结构中 Agent 自身缺乏社会性结构描述和与环境的交互。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;15-面向方面软件架构风格&#34;&gt;
  15 面向方面软件架构风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#15-%e9%9d%a2%e5%90%91%e6%96%b9%e9%9d%a2%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;优缺点分析
&lt;ol&gt;
&lt;li&gt;可以定义交叉的关系，并将这些关系应用于跨模块的、彼此不同的对象模型。&lt;/li&gt;
&lt;li&gt;AOP 同时还可以让我们层次化功能性而不是嵌入功能性，从而使代码由更好的可读性和易维护性。&lt;/li&gt;
&lt;li&gt;它会和面向对象编程可以很好地合作，互补。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;16-面向服务架构风格&#34;&gt;
  16 面向服务架构风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#16-%e9%9d%a2%e5%90%91%e6%9c%8d%e5%8a%a1%e6%9e%b6%e6%9e%84%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;优点
&lt;ol&gt;
&lt;li&gt;灵活性，根据需求变化，重新编排服务。&lt;/li&gt;
&lt;li&gt;对 IT 资产的复用。&lt;/li&gt;
&lt;li&gt;使企业的信息化建设真正以业务为核心。业务人员根据需求编排服务，而不必考虑技术细节。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ol&gt;
&lt;li&gt;服务的划分很困难。&lt;/li&gt;
&lt;li&gt;服务的编排是否得当。&lt;/li&gt;
&lt;li&gt;如果选择的接口标准有问题，会带来系统额外开销和不稳定性。&lt;/li&gt;
&lt;li&gt;对 IT 硬件资产还谈不上复用。&lt;/li&gt;
&lt;li&gt;主流实现方式接口很多，很难统一。&lt;/li&gt;
&lt;li&gt;主流实现方式只局限于不带界面的服务的共享。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;17-正交架构风格&#34;&gt;
  17 正交架构风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#17-%e6%ad%a3%e4%ba%a4%e6%9e%b6%e6%9e%84%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由完成不同功能的 n（n&amp;gt;1）个线索（子系统）组成。&lt;/li&gt;
&lt;li&gt;系统具有 m（m&amp;gt;1）个不同抽象级别的层。&lt;/li&gt;
&lt;li&gt;线索之间是相互独立（正交）的。&lt;/li&gt;
&lt;li&gt;系统有一个公共驱动层（一般为最高层）和公共数据结构（一般为最底层）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;结构清晰，易于理解。&lt;/li&gt;
&lt;li&gt;易修改，可维护性强。&lt;/li&gt;
&lt;li&gt;可移植性强，重用粒度大。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在实际应用中，并不是所有软件系统都能完全正交化，或者有时完全正交化的成本太高。因此，在进行应用项目的软件架构设计是，必须反复权衡进一步正交化的额外开销与所得到的更好的性能之间的关系。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;19-基于层次消息总线的架构风格&#34;&gt;
  19 基于层次消息总线的架构风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#19-%e5%9f%ba%e4%ba%8e%e5%b1%82%e6%ac%a1%e6%b6%88%e6%81%af%e6%80%bb%e7%ba%bf%e7%9a%84%e6%9e%b6%e6%9e%84%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;h4 id=&#34;20-模型-视图-控制器风格&#34;&gt;
  20 模型-视图-控制器风格
  &lt;a class=&#34;heading-link&#34; href=&#34;#20-%e6%a8%a1%e5%9e%8b-%e8%a7%86%e5%9b%be-%e6%8e%a7%e5%88%b6%e5%99%a8%e9%a3%8e%e6%a0%bc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;h2 id=&#34;第六章-软件架构与敏捷开发&#34;&gt;
  第六章 软件架构与敏捷开发
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ac%ac%e5%85%ad%e7%ab%a0-%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e4%b8%8e%e6%95%8f%e6%8d%b7%e5%bc%80%e5%8f%91&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;敏捷开发的基本理念&#34;&gt;
  敏捷开发的基本理念
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%95%8f%e6%8d%b7%e5%bc%80%e5%8f%91%e7%9a%84%e5%9f%ba%e6%9c%ac%e7%90%86%e5%bf%b5&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;强调个体和互动比强调过程和工具更好。&lt;/li&gt;
&lt;li&gt;强调获得可运行的软件比强调完成详尽的文档好。&lt;/li&gt;
&lt;li&gt;强调与客户合作比强调进行详细的合同谈判好。&lt;/li&gt;
&lt;li&gt;强调响应变化比强调遵循既定的计划好。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;敏捷开发与架构设计的关系&#34;&gt;
  敏捷开发与架构设计的关系
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%95%8f%e6%8d%b7%e5%bc%80%e5%8f%91%e4%b8%8e%e6%9e%b6%e6%9e%84%e8%ae%be%e8%ae%a1%e7%9a%84%e5%85%b3%e7%b3%bb&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;软件架构与敏捷开发的&lt;strong&gt;出发点是一致&lt;/strong&gt;的。
&lt;ul&gt;
&lt;li&gt;软件架构与敏捷开发&lt;strong&gt;都&lt;/strong&gt;是一个&lt;strong&gt;权衡的过程&lt;/strong&gt;：软件架构设计需要权衡涉众们的各种需求，在众多的解决方案中确定唯一的架构设计；敏捷开发是在软件开发过程混沌和大量开发管理活动加入的两个极端中做出的一种权衡。&lt;/li&gt;
&lt;li&gt;软件架构与敏捷开发&lt;strong&gt;目的都是为了提高软件开发效率、提高软件质量、降低软件成本，将开发团队的价值最大化&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;敏捷开发也需要重视软件架构。
&lt;ul&gt;
&lt;li&gt;软件架构设计对于敏捷开发来说也是必要的。两者在软件开发实践中能够共同存在，且互相促进。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;敏捷开发改变了软件架构的设计方式。
&lt;ul&gt;
&lt;li&gt;重视架构设计，但轻详细设计&lt;/li&gt;
&lt;li&gt;敏捷思想中将传统的架构设计分成：&lt;strong&gt;种子架构设计+详细架构设计&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;种子架构设计注重软件系统骨架；内容包括：软件的架构层次，重要模块，重要类的说明等&lt;/li&gt;
&lt;li&gt;详细架构设计转移到编码阶段、重构阶段、单元测试阶段等。



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-29-21-14-37.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;敏捷开发中如何改变了软件架构的设计方式&#34;&gt;
  敏捷开发中如何改变了软件架构的设计方式
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%95%8f%e6%8d%b7%e5%bc%80%e5%8f%91%e4%b8%ad%e5%a6%82%e4%bd%95%e6%94%b9%e5%8f%98%e4%ba%86%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e7%9a%84%e8%ae%be%e8%ae%a1%e6%96%b9%e5%bc%8f&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;敏捷开发把传统软件开发前期的详细架构设计，分散到了整个敏捷开发软件过程中，以达到提高效率、减少风险的目的。&lt;/li&gt;
&lt;li&gt;敏捷开发的思想在软件架构设计中最主要的体现就是团队设计和简单设计这两种设计理念。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;


&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-29-21-15-23.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;需求分析&lt;/strong&gt;： 敏捷开发中的需求分析引入了架构设计的理念，分为&lt;strong&gt;初始阶段需求分析和迭代阶段需求分析&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初始设计&lt;/strong&gt;：初始设计需要对软件系统的设计进行&lt;strong&gt;全局抽象层次&lt;/strong&gt;上的考虑。包括&lt;strong&gt;系统的基本处理流程&lt;/strong&gt;、&lt;strong&gt;系统的组织结构&lt;/strong&gt;、&lt;strong&gt;模块划分&lt;/strong&gt;、&lt;strong&gt;功能分配&lt;/strong&gt;等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;迭代过程&lt;/strong&gt;：迭代设计、重构、确定架构、客户交流&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第八章-软件架构设计与实现&#34;&gt;
  第八章 软件架构设计与实现
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ac%ac%e5%85%ab%e7%ab%a0-%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%ae%9e%e7%8e%b0&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;成功的软件架构应具有的品质&#34;&gt;
  成功的软件架构应具有的品质
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%88%90%e5%8a%9f%e7%9a%84%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e5%ba%94%e5%85%b7%e6%9c%89%e7%9a%84%e5%93%81%e8%b4%a8&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;良好的模块化。&lt;/li&gt;
&lt;li&gt;适应功能需求的变化，适应技术的变化 。&lt;/li&gt;
&lt;li&gt;对系统的动态运行有良好的规划&lt;/li&gt;
&lt;li&gt;对数据的良好规划。&lt;/li&gt;
&lt;li&gt;明确、灵活的部署规划。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;基于体系结构的软件设计方法&#34;&gt;
  基于体系结构的软件设计方法
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%9f%ba%e4%ba%8e%e4%bd%93%e7%b3%bb%e7%bb%93%e6%9e%84%e7%9a%84%e8%bd%af%e4%bb%b6%e8%ae%be%e8%ae%a1%e6%96%b9%e6%b3%95&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;基于体系结构的软件设计（ architecture-based software design, ABSD）方法为软件系统的概念体系结构提供构造方法，概念体系结构描述了系统的主要设计元素及其关系。概念体系结构代表了在开发过程中做出的第一个选择，它是达到系统质量和业务目标的关键，为达到预定功能提供了基础。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;absd-方法三基础&#34;&gt;
  ABSD 方法三基础
  &lt;a class=&#34;heading-link&#34; href=&#34;#absd-%e6%96%b9%e6%b3%95%e4%b8%89%e5%9f%ba%e7%a1%80&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;功能分解：ABSD 方法使用已有的基于模块的内聚和耦合技术；&lt;/li&gt;
&lt;li&gt;通过选择体系结构风格来实现质量和业务需求。&lt;/li&gt;
&lt;li&gt;软件模板的使用：利用一些软件系统的结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;absd-方法的输入&#34;&gt;
  ABSD 方法的输入
  &lt;a class=&#34;heading-link&#34; href=&#34;#absd-%e6%96%b9%e6%b3%95%e7%9a%84%e8%be%93%e5%85%a5&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;抽象功能需求&lt;/li&gt;
&lt;li&gt;用例&lt;/li&gt;
&lt;li&gt;抽象的质量和商业需求&lt;/li&gt;
&lt;li&gt;质量因素&lt;/li&gt;
&lt;li&gt;体系结构选项&lt;/li&gt;
&lt;li&gt;约束&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;absd-方法的步骤&#34;&gt;
  ABSD 方法的步骤
  &lt;a class=&#34;heading-link&#34; href=&#34;#absd-%e6%96%b9%e6%b3%95%e7%9a%84%e6%ad%a5%e9%aa%a4&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;开局一个关键词，内容全靠编&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;功能分解：分解的目的是使每个组在体系结构内代表独立的元素。&lt;/li&gt;
&lt;li&gt;选择体系结构风格&lt;/li&gt;
&lt;li&gt;为风格分配功能&lt;/li&gt;
&lt;li&gt;细化模板&lt;/li&gt;
&lt;li&gt;功能校验&lt;/li&gt;
&lt;li&gt;创建并发视图&lt;/li&gt;
&lt;li&gt;创建配置视图&lt;/li&gt;
&lt;li&gt;验证质量场景&lt;/li&gt;
&lt;li&gt;验证约束&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;将软件架构的概念和原则引入软件需求阶段有什么好处不引入可能会引起什么问题&#34;&gt;
  将软件架构的概念和原则引入软件需求阶段有什么好处？不引入可能会引起什么问题？
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%b0%86%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e7%9a%84%e6%a6%82%e5%bf%b5%e5%92%8c%e5%8e%9f%e5%88%99%e5%bc%95%e5%85%a5%e8%bd%af%e4%bb%b6%e9%9c%80%e6%b1%82%e9%98%b6%e6%ae%b5%e6%9c%89%e4%bb%80%e4%b9%88%e5%a5%bd%e5%a4%84%e4%b8%8d%e5%bc%95%e5%85%a5%e5%8f%af%e8%83%bd%e4%bc%9a%e5%bc%95%e8%b5%b7%e4%bb%80%e4%b9%88%e9%97%ae%e9%a2%98&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;若把架构概念引入需求分析阶段，有助于保证需求规约、系统设计之间的可追踪性和一致性，有效保持软件质量。&lt;/li&gt;
&lt;li&gt;将软件架构概念和原则引入需求分析，也可以让我们获得更有结构性和可重用的需求规约。&lt;/li&gt;
&lt;li&gt;用传统的方法产生需求规约，不考虑软件架构概念和原则，则在软件架构设计阶段建立需求规约与架构的映射将相对困难。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件架构和软件需求是如何协同演化的&#34;&gt;
  软件架构和软件需求是如何协同演化的？
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e5%92%8c%e8%bd%af%e4%bb%b6%e9%9c%80%e6%b1%82%e6%98%af%e5%a6%82%e4%bd%95%e5%8d%8f%e5%90%8c%e6%bc%94%e5%8c%96%e7%9a%84&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;软件需求和软件架构两者是&lt;strong&gt;相辅相成&lt;/strong&gt;的关系，一方面软件需求影响软件架构设计，另一方面软件架构帮助需求分析的明确和细化。&lt;/li&gt;
&lt;li&gt;需求与架构的互相影响可以看作一个螺旋的过程，也是一个&lt;strong&gt;双峰&lt;/strong&gt;的过程。在一个反复的过程中，产生更详细的需求规约和设计规约，最终把交织在软件开发过程中的设计规约和需求规约分离开来。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;将软件架构映射到详细设计经常遇到什么问题如何解决&#34;&gt;
  将软件架构映射到详细设计经常遇到什么问题?如何解决？
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%b0%86%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e6%98%a0%e5%b0%84%e5%88%b0%e8%af%a6%e7%bb%86%e8%ae%be%e8%ae%a1%e7%bb%8f%e5%b8%b8%e9%81%87%e5%88%b0%e4%bb%80%e4%b9%88%e9%97%ae%e9%a2%98%e5%a6%82%e4%bd%95%e8%a7%a3%e5%86%b3&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;问题
&lt;ol&gt;
&lt;li&gt;缺失重要架构视图，片面强调功能需求。&lt;/li&gt;
&lt;li&gt;不够深入，架构设计方案过于笼统，基本还停留在概念性架构的层面，没有提供明确的技术蓝图。&lt;/li&gt;
&lt;li&gt;名不副实的分层架构，缺失层次之间的交互接口和交互机制，只进行职责划分。&lt;/li&gt;
&lt;li&gt;在某些方面过度设计。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;解决方法
&lt;ol&gt;
&lt;li&gt;对于缺失重要架构视图问题，可以针对遗漏的架构视图进行设计。&lt;/li&gt;
&lt;li&gt;对于不够深入问题，需要将设计决策细化到和技术相关的层面。&lt;/li&gt;
&lt;li&gt;对于名不副实的分层架构问题，需要步步深入，明确各层之间的交互接口和交互机制。&lt;/li&gt;
&lt;li&gt;虽然我们必须考虑到系统的扩展性，可维护性等，但切忌过度设计。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mda-的基本思想过程应用-mda-的好处&#34;&gt;
  MDA 的基本思想，过程，应用 MDA 的好处
  &lt;a class=&#34;heading-link&#34; href=&#34;#mda-%e7%9a%84%e5%9f%ba%e6%9c%ac%e6%80%9d%e6%83%b3%e8%bf%87%e7%a8%8b%e5%ba%94%e7%94%a8-mda-%e7%9a%84%e5%a5%bd%e5%a4%84&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;MAD——model driven architecture，基于模型驱动软件架构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;基本思想：将软件系统分成模型和实现两部分：模型是对系统的描述，实现是利用特定技术在特定平台或环境中对模型的解释。模型仅仅负责对系统的描述，与实现技术无关。这是模型的实现技术无关性。&lt;/li&gt;
&lt;li&gt;过程
&lt;ol&gt;
&lt;li&gt;用计算无关模型(Computer Independent Model) 捕获需求；&lt;/li&gt;
&lt;li&gt;创建平台无关模型(Platfor Independent Model)；&lt;/li&gt;
&lt;li&gt;将 PIM 转化成为一个或多个平台特定模型 ( PSM )，并加入平台特定的规则和代码；&lt;/li&gt;
&lt;li&gt;将 PSM 转化为代码等。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;好处: 将模型与实现分离后，能够很好的适应技术易变性。由于实现往往高度依赖特定技术和特定平台，当技术发生迁移时，只需针对这种技术作相应的实现，编写相应的运行平台或变换工具。所以，能够比较好的应对实现技术发展带来的挑战。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;notice note&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-sticky-note&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Note
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;&lt;p&gt;&lt;strong&gt;MDA 的映射方法中的三类模型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算无关模型(CIM): 也称业务模型，描述系统外部行为和运行环境&lt;/li&gt;
&lt;li&gt;平台无关模型(PIM): 具有高抽象层次，无关于任何实现技术的模型&lt;/li&gt;
&lt;li&gt;平台特定模型(PSM): 为某种特定实现技术量身定做，让你用这种技术中可用的实现构造来买描述系统的模型。PIM 会被变换成一个或多个 PSM



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-29-22-58-35.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;第十五章-软件体系结构评估&#34;&gt;
  第十五章 软件体系结构评估
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ac%ac%e5%8d%81%e4%ba%94%e7%ab%a0-%e8%bd%af%e4%bb%b6%e4%bd%93%e7%b3%bb%e7%bb%93%e6%9e%84%e8%af%84%e4%bc%b0&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;ATAM-Architecture Tradeoff Analysis Method&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;质量属性质量场景&#34;&gt;
  质量属性，质量场景
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%b4%a8%e9%87%8f%e5%b1%9e%e6%80%a7%e8%b4%a8%e9%87%8f%e5%9c%ba%e6%99%af&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;质量属性
&lt;ul&gt;
&lt;li&gt;可修改性&lt;/li&gt;
&lt;li&gt;可用性&lt;/li&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;li&gt;可测试性&lt;/li&gt;
&lt;li&gt;易用性&lt;/li&gt;
&lt;li&gt;安全性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;质量场景
&lt;ul&gt;
&lt;li&gt;为精确得出具体的质量目标，并以之作为判定该体系结构优劣的标准。我们把为得出这些目标而采用的机制叫做场景&lt;/li&gt;
&lt;li&gt;场景是风险承担者的角度对系统的交互的简短描述&lt;/li&gt;
&lt;li&gt;在体系结构评估中，一般采用&lt;strong&gt;刺激&lt;/strong&gt;，&lt;strong&gt;环境&lt;/strong&gt;和&lt;strong&gt;响应&lt;/strong&gt;三方面来对场景进行描述&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;概念&#34;&gt;
  概念
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%a6%82%e5%bf%b5&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;敏感点&lt;/strong&gt;: 敏感点是一个或者多个构件的特征；&lt;strong&gt;影响一个质量属性&lt;/strong&gt;；可以使设计师搞清楚实现质量目标时应该注意什么。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;权衡点&lt;/strong&gt;: 权衡点是&lt;strong&gt;影响多个质量属性&lt;/strong&gt;的特征；是多个质量属性的敏感点；权衡点需要进行权衡。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;质量效用树&lt;/strong&gt;: 效用树为我们提供了一种直接而有效地将系统的业务驱动因素转换为具体的质量属性场景的机制，该步骤的输出结果是对具体质量属性需求（以场景形式实现）的优先级的确定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险承担者、涉众、牵涉到的人&lt;/strong&gt;: 体系结构设计师、开发人员、维护人员、集成人员、测试人员、标准专家、性能工程师&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;atam-评估步骤&#34;&gt;
  ATAM 评估步骤
  &lt;a class=&#34;heading-link&#34; href=&#34;#atam-%e8%af%84%e4%bc%b0%e6%ad%a5%e9%aa%a4&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ATAM 主要部分包括 4 组，共 9 个步骤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;陈述，包括通过它进行的信息交流&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;ATAM 方法的陈述：评估负责人&lt;/li&gt;
&lt;li&gt;商业动机的陈述：项目经理或系统客户&lt;/li&gt;
&lt;li&gt;SA 的陈述：系统设计人员&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调查与分析，包括对照体系结构方法评估关键质量属性需求&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;确定体系结构方法：系统设计人员&lt;/li&gt;
&lt;li&gt;生成质量效用树&lt;/li&gt;
&lt;li&gt;分析体系结构方法：基于质量效用树中的高优先级场景，说明和分析这些场景的体系结构方法（识别风险，非风险，敏感点，权衡点）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试，包括对照所有相关人员的需求检验最新结果&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;集体讨论并确定场景优先级&lt;/li&gt;
&lt;li&gt;分析体系结构方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;形成报告，包括陈述 ATAM 的结果&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;结果的表述&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;质量效用树的构建&#34;&gt;
  质量效用树的构建
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%b4%a8%e9%87%8f%e6%95%88%e7%94%a8%e6%a0%91%e7%9a%84%e6%9e%84%e5%bb%ba&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;效用树中质量属性细化为场景&lt;/li&gt;
&lt;li&gt;确定最重要的质量属性目标，并设置优先级&lt;/li&gt;
&lt;li&gt;效用树设置优先级标准



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-29-23-33-08.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优缺点&#34;&gt;
  优缺点
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%bc%98%e7%bc%ba%e7%82%b9&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;考虑了所有与系统相关的人员对质量的要求。&lt;/li&gt;
&lt;li&gt;涉及到的基本活动包括确定应用领域的功能和软件体系结构之间的映射，设计用于体现待评估质量属性的场景以及分析软件体系结构对场景的支持程度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基于场景的评估方式是特定领域&lt;/strong&gt;的，对一个领域适合的场景设计在另一领域未必适合。&lt;/li&gt;
&lt;li&gt;实施者一方面需要有丰富的领域知识以对某质量需求设计出合理的场景，另一方面，必须对待评估的软件体系结构有一定的了解以判断是否支持场景描述的一系列活动。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第十章-软件架构相关课题&#34;&gt;
  第十章 软件架构相关课题
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ac%ac%e5%8d%81%e7%ab%a0-%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e7%9b%b8%e5%85%b3%e8%af%be%e9%a2%98&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;软件架构演化与维护&#34;&gt;
  软件架构演化与维护
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%bd%af%e4%bb%b6%e6%9e%b6%e6%9e%84%e6%bc%94%e5%8c%96%e4%b8%8e%e7%bb%b4%e6%8a%a4&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;软件架构的生命周期：初始设计，实际使用，修改完善（软件架构的演化与维护过程），退化弃用&lt;/li&gt;
&lt;li&gt;软件架构演化的目的就是为了维护软件架构自身的有用性&lt;/li&gt;
&lt;li&gt;软件架构的演化需要考虑具体的软件架构定义
&lt;ul&gt;
&lt;li&gt;对于软件架构={组件，连接件，约束}；则要关注的为组件，连接件和约束的添加，修改与删除&lt;/li&gt;
&lt;li&gt;对于面向对象软件架构,结合 UML 顺序图，利用层次自动机给出演化操作的具体演化规则：
&lt;ul&gt;
&lt;li&gt;对象演化&lt;/li&gt;
&lt;li&gt;消息演化&lt;/li&gt;
&lt;li&gt;复合片段演化&lt;/li&gt;
&lt;li&gt;约束演化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;针对软件架构的演化过程是否处于系统运行时期，可以将软件架构演化分为静态演化和动态演化。
&lt;ul&gt;
&lt;li&gt;静态演化：发生在软件架构设计、实现和维护过程中，软件系统还未运行或者处于运行停止状态。&lt;/li&gt;
&lt;li&gt;动态演化：发生在软件系统运行过程中。
&lt;div class=&#34;notice warning&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-exclamation-triangle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Warning
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;这一块 ppt 上挺多的，在第十章 ppt,注意一手,静态演化和动态演化&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;架构腐蚀&#34;&gt;
  架构腐蚀
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9e%b6%e6%9e%84%e8%85%90%e8%9a%80&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;定义
&lt;ul&gt;
&lt;li&gt;软件架构腐蚀（software architecture erosion）是指预期软件架构或概念软件架构与实际软件架构之间的偏离。&lt;/li&gt;
&lt;li&gt;它意味着最终的实现并没有完全满足预定的计划或违背了系统的约束和规则。这种偏离更多的是源自日常的软件修改，而非人为的恶意。&lt;/li&gt;
&lt;li&gt;架构腐蚀会导致软件演化过程中出现工程质量的恶化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;预防方法
&lt;ul&gt;
&lt;li&gt;腐蚀最小化&lt;/li&gt;
&lt;li&gt;腐蚀预防&lt;/li&gt;
&lt;li&gt;腐蚀修补&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;架构技术债&#34;&gt;
  架构技术债
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9e%b6%e6%9e%84%e6%8a%80%e6%9c%af%e5%80%ba&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;定义
&lt;ul&gt;
&lt;li&gt;技术债是指开发人员为了加速软件开发，或是由于自身经验的缺乏，有意或无意的在应该采用最佳方案的时候进行了妥协，使用了短时期能加速软件开发的方案，从而在未来给自己带来额外的开发负担。最终会带来&amp;quot;技术破产&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分类
&lt;ul&gt;
&lt;li&gt;代码债
&lt;ul&gt;
&lt;li&gt;静态分析工具的违规行为&lt;/li&gt;
&lt;li&gt;不一致的编码风格&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计债
&lt;ul&gt;
&lt;li&gt;设计臭味&lt;/li&gt;
&lt;li&gt;违背设计原则的行为&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;测试债
&lt;ul&gt;
&lt;li&gt;测试缺乏&lt;/li&gt;
&lt;li&gt;测试覆盖面不充分&lt;/li&gt;
&lt;li&gt;不恰当的测试设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文档债
&lt;ul&gt;
&lt;li&gt;缺少重要技术文档&lt;/li&gt;
&lt;li&gt;较差的文档&lt;/li&gt;
&lt;li&gt;未及时修改更新的文档&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;产生技术债的一些根本原因
&lt;ul&gt;
&lt;li&gt;进度压力&lt;/li&gt;
&lt;li&gt;软件设计师缺乏足够的经验和技巧&lt;/li&gt;
&lt;li&gt;不注重设计原则的应用&lt;/li&gt;
&lt;li&gt;缺乏对设计坏味和重构的意识&lt;/li&gt;
&lt;li&gt;开发中有意采用非最优的选择&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;架构坏味道&#34;&gt;
  架构坏味道
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9e%b6%e6%9e%84%e5%9d%8f%e5%91%b3%e9%81%93&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;代码坏味道
&lt;ul&gt;
&lt;li&gt;如果程序中某一段代码是不稳定的或者有一些潜在的问题，那么该段代码往往会包含一些明显的不太好的痕迹。我们称这些痕迹为代码坏味道。架构坏味道定义和代码坏味道类似，只是架构坏味道在系统粒度下出现的层次要高于代码坏味道。&lt;/li&gt;
&lt;li&gt;方法级的代码坏味道：过长方法；参数太多；超长标识符；超短标识符；数据过量返回；超长代码行 etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;架构坏味道
&lt;ul&gt;
&lt;li&gt;是一种通常使用的，可以对系统生命周期特性产生消极影响的架构设计。它可能是由于在不适当的环境下应用了一个不适合的解决方案或者在错误的粒度层次下应用了某个设计抽象等产生的，会对系统的可理解性、可测试性、可扩展性以及可重用性等产生负面影响。&lt;/li&gt;
&lt;li&gt;典型的架构坏味道：连接件嫉妒、过度分散的功能、模糊接口、无关的相邻连接件、砖关注过载、砖使用过载、砖循环依赖、未使用接口、重复的组件功能、组件嫉妒、连接件链。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;架构脆弱性&#34;&gt;
  架构脆弱性
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9e%b6%e6%9e%84%e8%84%86%e5%bc%b1%e6%80%a7&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;软件（系统）架构设计存在一些明显的或者隐含的缺陷，攻击者可以利用这些缺陷攻击系统，或者当受到某个或某些外部刺激时，系统发生性能下降、稳定性下降、可靠性下降、安全性下降等等。如果软件架构具备这类缺陷，我们认为该软件架构是脆弱的，也就是软件架构脆弱性。&lt;/li&gt;
&lt;li&gt;软件架构脆弱性通常与软件架构的风格和模式有关，不同风格和模式的软件架构，脆弱性体现和特点有很大不同。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>DBMS-Chp1&amp;2&amp;3</title>
      <link>http://acupofair.github.io/posts/dbms/chp1_2_3/</link>
      <pubDate>Tue, 21 Dec 2021 15:04:19 +0800</pubDate>
      
      <guid>http://acupofair.github.io/posts/dbms/chp1_2_3/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;数据库管理系统第一，二，三章笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;🚗&lt;/p&gt;
&lt;h1 id=&#34;第一章-介绍&#34;&gt;
  第一章 介绍
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ac%ac%e4%b8%80%e7%ab%a0-%e4%bb%8b%e7%bb%8d&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;11-介绍&#34;&gt;
  1.1 介绍
  &lt;a class=&#34;heading-link&#34; href=&#34;#11-%e4%bb%8b%e7%bb%8d&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;databasedbms&#34;&gt;
  Database&amp;amp;DBMS
  &lt;a class=&#34;heading-link&#34; href=&#34;#databasedbms&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据库：A very large, integrated collection of data&lt;/li&gt;
&lt;li&gt;数据库系统： 一个设计来储存和管理数据库的软件包&lt;/li&gt;
&lt;li&gt;文件与数据库的区别
&lt;ol&gt;
&lt;li&gt;数据量大&lt;/li&gt;
&lt;li&gt;不同查询不同的代码&lt;/li&gt;
&lt;li&gt;必须保持数据不变由于多位并发用户&lt;/li&gt;
&lt;li&gt;奔溃能恢复&lt;/li&gt;
&lt;li&gt;安全与访问控制&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;为啥用数据库系统
&lt;ol&gt;
&lt;li&gt;数据独立性与高效访问&lt;/li&gt;
&lt;li&gt;减少应用开发时间&lt;/li&gt;
&lt;li&gt;数据集成性与安全性&lt;/li&gt;
&lt;li&gt;统一的数据管理员&lt;/li&gt;
&lt;li&gt;并发访问，奔溃恢复&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-data-model-and-data-schema&#34;&gt;
  Data, Data Model and Data Schema
  &lt;a class=&#34;heading-link&#34; href=&#34;#data-data-model-and-data-schema&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据：描述现实世界的符号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据模型&lt;/strong&gt;：描述数据的一组概念和定义&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据模式&lt;/strong&gt;：对给定的数据模型的具体描述，数据模型的实例化&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;notice note&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-sticky-note&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Note
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;&lt;p&gt;&lt;strong&gt;高频考点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data model&lt;/strong&gt;: a collection of concepts and definitions for describing data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data schema&lt;/strong&gt;: a description of a particular collection of data, using a given data model.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;三层抽象架构ansi-sparc-architecture及其对数据独立性的支持&#34;&gt;
  三层抽象架构(ansi-sparc architecture)及其对数据独立性的支持
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%b8%89%e5%b1%82%e6%8a%bd%e8%b1%a1%e6%9e%b6%e6%9e%84ansi-sparc-architecture%e5%8f%8a%e5%85%b6%e5%af%b9%e6%95%b0%e6%8d%ae%e7%8b%ac%e7%ab%8b%e6%80%a7%e7%9a%84%e6%94%af%e6%8c%81&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Schemas are defined using DDL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Data is modified/queried using DML&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;views:描述用户所看见的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;conceptual(logical) schema:定义数据的逻辑结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;physical schema:描述文件与索引怎么用的&lt;/p&gt;
&lt;p&gt;


&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-23-20-50-14.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据的独立性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Applications insulated(绝缘的) from how data is structured and stored&lt;/li&gt;
&lt;li&gt;Logical data independence: Protection from changes in logical structure of data&lt;/li&gt;
&lt;li&gt;Physical data independence: Protection from changs in physical structure of data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据库系统&#34;&gt;
  数据库系统
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93%e7%b3%bb%e7%bb%9f&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据库系统组成



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-23-21-20-35.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组成：应用，DBMS,数据库，DBA&lt;/li&gt;
&lt;li&gt;DBMS 是数据库系统的核心
&lt;ul&gt;
&lt;li&gt;高级的用户接口&lt;/li&gt;
&lt;li&gt;查询过程与优化&lt;/li&gt;
&lt;li&gt;目录管理&lt;/li&gt;
&lt;li&gt;并发控制与恢复&lt;/li&gt;
&lt;li&gt;完整性约束检查&lt;/li&gt;
&lt;li&gt;访问控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库系统的生命周期&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库系统规划&lt;/li&gt;
&lt;li&gt;数据库设计&lt;/li&gt;
&lt;li&gt;数据库的创建&lt;/li&gt;
&lt;li&gt;数据库运行，管理与维护&lt;/li&gt;
&lt;li&gt;数据库的扩充与重构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;第二章-数据模型&#34;&gt;
  第二章 数据模型
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ac%ac%e4%ba%8c%e7%ab%a0-%e6%95%b0%e6%8d%ae%e6%a8%a1%e5%9e%8b&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;21-层次数据模型&#34;&gt;
  2.1 层次数据模型
  &lt;a class=&#34;heading-link&#34; href=&#34;#21-%e5%b1%82%e6%ac%a1%e6%95%b0%e6%8d%ae%e6%a8%a1%e5%9e%8b&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;基本概念&#34;&gt;
  基本概念
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;记录：描述事物与他们之间关系的数据单位，存储的数据单位,由多个字段构成&lt;/li&gt;
&lt;li&gt;字段：简单的数据类型&lt;/li&gt;
&lt;li&gt;PCR(双亲子女关系，1:N 的关系)&lt;/li&gt;
&lt;li&gt;分层模式：包含多对 PCRs，树状结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;拓展&#34;&gt;
  拓展
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%8b%93%e5%b1%95&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;虚拟记录：将层次数据模型推广到非层次型的数据（存在数据冗余）
&lt;ul&gt;
&lt;li&gt;多对多的关系(M:N)&lt;/li&gt;
&lt;li&gt;一个记录型是两个以上的 PCR 的子女&lt;/li&gt;
&lt;li&gt;多元关系



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-23-22-38-03.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;避免数据冗馀：只存一份记录，其他引用地方用指针代替。用指针代替的记录叫&lt;strong&gt;虚拟记录&lt;/strong&gt;



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-23-22-43-49.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;大量指针增加数据库开销，数据模式也不够直观清晰&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;22-网状数据结构不做要求&#34;&gt;
  2.2 网状数据结构：不做要求
  &lt;a class=&#34;heading-link&#34; href=&#34;#22-%e7%bd%91%e7%8a%b6%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e4%b8%8d%e5%81%9a%e8%a6%81%e6%b1%82&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h2 id=&#34;23-关系数据模型&#34;&gt;
  2.3 关系数据模型
  &lt;a class=&#34;heading-link&#34; href=&#34;#23-%e5%85%b3%e7%b3%bb%e6%95%b0%e6%8d%ae%e6%a8%a1%e5%9e%8b&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;关系型数据库的特点&#34;&gt;
  关系型数据库的特点
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%85%b3%e7%b3%bb%e5%9e%8b%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e7%89%b9%e7%82%b9&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Based on set theory, high abstract level&lt;/li&gt;
&lt;li&gt;Shield all lower details, simple and clear, easy to understand&lt;/li&gt;
&lt;li&gt;Can establish new algebra system &amp;ndash; relational algebra&lt;/li&gt;
&lt;li&gt;Non procedure query language &amp;ndash; SQL&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Soft link&lt;/strong&gt; &amp;ndash; the essential difference with former data models



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-23-22-53-26.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;简单的概念们&#34;&gt;
  简单的概念们
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ae%80%e5%8d%95%e7%9a%84%e6%a6%82%e5%bf%b5%e4%bb%ac&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;属性和域&#34;&gt;
  属性和域
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%b1%9e%e6%80%a7%e5%92%8c%e5%9f%9f&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;每个属性对应的值的集合是为取值的范围即为域&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;关系和元组&#34;&gt;
  关系和元组
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%85%b3%e7%b3%bb%e5%92%8c%e5%85%83%e7%bb%84&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;关系：就是表,属性是列，元组是行&lt;/li&gt;
&lt;li&gt;关系的模式或型(schema)
&lt;ul&gt;
&lt;li&gt;$R = (A_1, A_2&amp;hellip;A_n)$称为关系 R 的 schema&lt;/li&gt;
&lt;li&gt;$A_i$是属性名&lt;/li&gt;
&lt;li&gt;n 称为关系的目&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;元组
&lt;ul&gt;
&lt;li&gt;$r(R) = { t_1, t_2, &amp;hellip;t_m}$,关系 R 表示为 r,为 n 目元组的集合&lt;/li&gt;
&lt;li&gt;$t = &amp;lt;v_1, v_2, &amp;hellip;, v_n&amp;gt; v_i \in D_i$ 每个元组表示为 t，D 是域&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;键&#34;&gt;
  键：
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%94%ae&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;超键：在关系中能唯一标识元组的属性集(&lt;strong&gt;其子集也可以标识&lt;/strong&gt;),候选键的爸爸&lt;/li&gt;
&lt;li&gt;候选键： 某一属性或一组属性唯一的决定了一个元组,且&lt;strong&gt;其任何真子集无此性质&lt;/strong&gt;（不含多余属性的超键）&lt;/li&gt;
&lt;li&gt;主键：候选键中的一个&lt;/li&gt;
&lt;li&gt;全键(all key):若主键由所有属性组成，则称为全键&lt;/li&gt;
&lt;li&gt;候补键：候选键中除主键外的&lt;/li&gt;
&lt;li&gt;主属性：包含在任何一个候选键的属性&lt;/li&gt;
&lt;li&gt;非主属性：不包含在任何一个候选键的属性&lt;/li&gt;
&lt;li&gt;外键：关系 R1 不是主键，关系 R2 是主键，则其为关系 R1 外键&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;最基本的三个完整性约束&#34;&gt;
  最基本的三个完整性约束：
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9c%80%e5%9f%ba%e6%9c%ac%e7%9a%84%e4%b8%89%e4%b8%aa%e5%ae%8c%e6%95%b4%e6%80%a7%e7%ba%a6%e6%9d%9f&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;域完整性约束：属性值得在域中&lt;/li&gt;
&lt;li&gt;实体完整性约束：一个关系内的约束，每个关系都要有一个主键，每个元组（实体）的主键值应唯一且不为 NULL&lt;/li&gt;
&lt;li&gt;引用完整型约束：外键要么空缺，要么引用实际存在的主键值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关系代数&#34;&gt;
  关系代数
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%85%b3%e7%b3%bb%e4%bb%a3%e6%95%b0&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;基础操作完整的操作集合&#34;&gt;
  基础操作：(完整的操作集合)
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%9f%ba%e7%a1%80%e6%93%8d%e4%bd%9c%e5%ae%8c%e6%95%b4%e7%9a%84%e6%93%8d%e4%bd%9c%e9%9b%86%e5%90%88&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;选择($\sigma$) : 选择几行，后面是布尔表达式&lt;/li&gt;
&lt;li&gt;投影($\pi$) : 选择几列，后面也是布尔表达式&lt;/li&gt;
&lt;li&gt;笛卡尔积($\times$): 连接两张表&lt;/li&gt;
&lt;li&gt;集合差(-): 就是集合的差，韦恩图都懂的&lt;/li&gt;
&lt;li&gt;并($\cup$) : 集合的并嘛&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;额外操作&#34;&gt;
  额外操作：
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%a2%9d%e5%a4%96%e6%93%8d%e4%bd%9c&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;连接($\Join$) : $R \Join_C S = (R\times S)$; C 是连接条件&lt;/li&gt;
&lt;li&gt;除($\div$) : 除以自己有的，没的直接删



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-23-23-41-48.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;外连接:
&lt;ul&gt;
&lt;li&gt;左外连接($* \Join$) :连接结果只保留左关系的所有元组&lt;/li&gt;
&lt;li&gt;右外连接($\Join*$) :连接结果只保留右关系的所有元组&lt;/li&gt;
&lt;li&gt;全外连接($* \Join *$) : 保留左右两关系的所有元组



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-23-23-46-36.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外并($\underline{\cup}$): 对非兼容的两个关系也可以并，那些元组中没有的属性就填 NULL



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-23-23-49-52.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;notice tip&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-lightbulb-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Tip
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;这里的关系演算有时公式会很长，一定要有大局观，看好筛选条件，连接条件再去做可以省下九成的运算量&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;关系演算&#34;&gt;
  关系演算
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%85%b3%e7%b3%bb%e6%bc%94%e7%ae%97&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;关系代数表示关系操作，须标明关系操作的次序，注重过程,因而以关系代数为基础的数据库语言是过程语言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;关系演算只要说明所要得到的结果，不必标明操作过程，注重结果,以关系演算为基础的数据库语言是非过程语言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;共同点:They are equivalent in terms of expression. SQL language can express any query that is expressible in relational algebra/caculus.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;元组关系演算trc&#34;&gt;
  元组关系演算(TRC)
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%85%83%e7%bb%84%e5%85%b3%e7%b3%bb%e6%bc%94%e7%ae%97trc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;一般形式：$\{ t[&amp;lt;属性表&amp;gt;] | P(t)\}$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关系模式：R(ABC), r 为 R 的一个值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;投影:$\Pi_{AB}(r) = \{ t[AB] | t\in r \}$&lt;/li&gt;
&lt;li&gt;选择:$\sigma_{F}(R) = \{t | t \in r \ AND\  F \}$&lt;/li&gt;
&lt;li&gt;并:$r \cup s= \{t | t \in r  \ OR\ t \in s\}$&lt;/li&gt;
&lt;li&gt;差:$r - s = \{t | t \in r \ AND\ \urcorner(t\in s)\}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设$R(ABC)$和$S(CDE)$,r,s 分别为其值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连接:$t \Join s = \{t[ABCDE]|t[ABC] \in r \ AND\ t[CDE]\in s\}$&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;notice question&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-question&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Question
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;&lt;ul&gt;
&lt;li&gt;Why$\urcorner(t\in s)$ NOT $t\notin s$&lt;/li&gt;
&lt;li&gt;好像是因为关系演算中没有$\notin$运算符&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&#34;域关系演算drc&#34;&gt;
  域关系演算(DRC)
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%9f%9f%e5%85%b3%e7%b3%bb%e6%bc%94%e7%ae%97drc&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;一般形式: $\{ &amp;lt;x_1, x_2, &amp;hellip;,x_n&amp;gt; | P(x_1, x_2, &amp;hellip;.x_n, x_n+1, &amp;hellip;x_n+m) \}$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;前面部分为结果中出现的域&lt;/li&gt;
&lt;li&gt;后面部分为结果中满足每条记录满足的条件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;notice example&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-file-text&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Example
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;&lt;p&gt;$$\pi_{sid, sname, age}(\sigma_{age&amp;gt;35}(S_1)$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TRC:
$$\{t[sid,sname,age]|t\in S_1 \wedge t.age &amp;gt; 35\}$$&lt;/li&gt;
&lt;li&gt;DRC:
$$\{&amp;lt;sid,sname,age&amp;gt;|&amp;lt;sid,sname,age&amp;gt;\in S_1 \wedge age &amp;gt; 35\}$$&lt;/li&gt;
&lt;li&gt;TRC 中用的 t.age 而不是 t[age]；DRC 则直接用域名来做运算；另外别忘了加限制集，不然查询结果无穷大&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;24-er-数据模型实体联系数据模型&#34;&gt;
  2.4 ER 数据模型(实体联系数据模型)
  &lt;a class=&#34;heading-link&#34; href=&#34;#24-er-%e6%95%b0%e6%8d%ae%e6%a8%a1%e5%9e%8b%e5%ae%9e%e4%bd%93%e8%81%94%e7%b3%bb%e6%95%b0%e6%8d%ae%e6%a8%a1%e5%9e%8b&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;是上面三种传统数据模型互相转换的中间模型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;er-图&#34;&gt;
  ER 图
  &lt;a class=&#34;heading-link&#34; href=&#34;#er-%e5%9b%be&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;矩形：实体；双线矩形表示弱实体&lt;/li&gt;
&lt;li&gt;菱形：关系&lt;/li&gt;
&lt;li&gt;椭圆： 属性&lt;/li&gt;
&lt;li&gt;弧上的数字表示联系的基数比；双线弧表示该实体全参与,单线表示部分参与



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-25-11-23-20.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;扩充-e-r-数据模型我赌不考&#34;&gt;
  扩充 E-R 数据模型（我赌不考）
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%89%a9%e5%85%85-e-r-%e6%95%b0%e6%8d%ae%e6%a8%a1%e5%9e%8b%e6%88%91%e8%b5%8c%e4%b8%8d%e8%80%83&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;特殊化和普遍化：就是实体之间的继承,在弧上加$\cup$来表示&lt;/li&gt;
&lt;li&gt;聚集：把参与联系的实体组合形成新的实体&lt;/li&gt;
&lt;li&gt;范畴：超实体集并的子集&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;25-面向对象数据模型没细讲&#34;&gt;
  2.5 面向对象数据模型（没细讲）
  &lt;a class=&#34;heading-link&#34; href=&#34;#25-%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e6%95%b0%e6%8d%ae%e6%a8%a1%e5%9e%8b%e6%b2%a1%e7%bb%86%e8%ae%b2&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h2 id=&#34;其他数据模型&#34;&gt;
  其他数据模型
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%85%b6%e4%bb%96%e6%95%b0%e6%8d%ae%e6%a8%a1%e5%9e%8b&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基于逻辑的数据模型&lt;/li&gt;
&lt;li&gt;时态数据模型&lt;/li&gt;
&lt;li&gt;空间数据模型&lt;/li&gt;
&lt;li&gt;XML 数据模型&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;第三章-用户接口和sql语言&#34;&gt;
  第三章 用户接口和SQL语言
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ac%ac%e4%b8%89%e7%ab%a0-%e7%94%a8%e6%88%b7%e6%8e%a5%e5%8f%a3%e5%92%8csql%e8%af%ad%e8%a8%80&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;31-用户接口与-sql-语言&#34;&gt;
  3.1 用户接口与 SQL 语言
  &lt;a class=&#34;heading-link&#34; href=&#34;#31-%e7%94%a8%e6%88%b7%e6%8e%a5%e5%8f%a3%e4%b8%8e-sql-%e8%af%ad%e8%a8%80&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;关系代数是一种过程语言，以此设计的数据库语言，用户不仅要说明需要什么数据，还要说明获得这些数据的过程。&lt;/li&gt;
&lt;li&gt;对用户来说，最好只说明需要什么数据，而如何获得这些数据则不必用户说明，而由系统来实现。即非过程语言。&lt;/li&gt;
&lt;li&gt;非过程关系数据库语言里最成功的应用最广的:SQL 语言&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;32-sql-语言概述&#34;&gt;
  3.2 SQL 语言概述
  &lt;a class=&#34;heading-link&#34; href=&#34;#32-sql-%e8%af%ad%e8%a8%80%e6%a6%82%e8%bf%b0&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SQL 指什么
&lt;ul&gt;
&lt;li&gt;IBM:Structured Query Language&lt;/li&gt;
&lt;li&gt;ANSI(美国国家标准协会):Standard Query Language&lt;/li&gt;
&lt;li&gt;wiki 百科，以及大部分资料都解释为第一种&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SQL 按功能分为四大部分
&lt;ul&gt;
&lt;li&gt;数据定义语言(Data Definition Language):用于定义，撤销和修改数据模式&lt;/li&gt;
&lt;li&gt;查询语言(Query Language)：用于查询数据&lt;/li&gt;
&lt;li&gt;数据操纵语言(Data Manipulation Language)：用于增删改数据&lt;/li&gt;
&lt;li&gt;数据控制语言(Data Control Language)：用于数据访问控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;33-sql-数据定义语言ddl上课没提&#34;&gt;
  3.3 SQL 数据定义语言(DDL)[上课没提]
  &lt;a class=&#34;heading-link&#34; href=&#34;#33-sql-%e6%95%b0%e6%8d%ae%e5%ae%9a%e4%b9%89%e8%af%ad%e8%a8%80ddl%e4%b8%8a%e8%af%be%e6%b2%a1%e6%8f%90&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;关系又称表，关系数据库的基本组成单位。&lt;/li&gt;
&lt;li&gt;表分为两类
&lt;ul&gt;
&lt;li&gt;基表：数据显式存在数据库中&lt;/li&gt;
&lt;li&gt;虚表（试图 view）：仅有逻辑定义，可根据其他基表或视图导出，不显式存在数据库中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对基表的操作
&lt;ul&gt;
&lt;li&gt;增加列&lt;/li&gt;
&lt;li&gt;删除基表&lt;/li&gt;
&lt;li&gt;补充定义主键&lt;/li&gt;
&lt;li&gt;撤销主键定义&lt;/li&gt;
&lt;li&gt;补充定义外键&lt;/li&gt;
&lt;li&gt;撤销外键定义&lt;/li&gt;
&lt;li&gt;定义和撤销别名&lt;/li&gt;
&lt;li&gt;索引的建立和撤销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;34-sql-查询语言ql&#34;&gt;
  3.4 SQL 查询语言(QL)
  &lt;a class=&#34;heading-link&#34; href=&#34;#34-sql-%e6%9f%a5%e8%af%a2%e8%af%ad%e8%a8%80ql&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;基本的-sql-查询语句&#34;&gt;
  基本的 SQL 查询语句
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e7%9a%84-sql-%e6%9f%a5%e8%af%a2%e8%af%ad%e5%8f%a5&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;基本格式&#34;&gt;
  基本格式
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e6%a0%bc%e5%bc%8f&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;只有 SELECT 和 FROM 是必须的，别的子句可选&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;SELECT 字句： 后接需要查询的项目&lt;/li&gt;
&lt;li&gt;FROM 子句： 指定了选择的数据表。FROM 子句也可以包含 JOIN 二层子句来为数据表的连接设置规则。&lt;/li&gt;
&lt;li&gt;WHERE 子句： 后接一个比较谓词以限制返回的行。WHERE 子句仅保留返回结果里使得比较谓词的值为 True 的行。&lt;/li&gt;
&lt;li&gt;GROUP BY 子句： 用于将若干含有相同值的行合并。 GROUP BY 通常与 SQL 聚合函数连用，或者用于清除数据重复的行。GROUP BY 子句要用在 WHERE 子句之后。&lt;/li&gt;
&lt;li&gt;HAVING 子句： 后接一个谓词来过滤从 GROUP BY 子句中获得的结果，由于其作用于 GROUP BY 子句之上，所以聚合函数也可以放到其谓词中。&lt;/li&gt;
&lt;li&gt;ORDER BY： 子句指明将哪个字段用作排序关键字，以及排序顺序(升序/降序)，如果无此子句，那么返回结果的顺序不能保证有序&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;执行顺序&#34;&gt;
  执行顺序
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%89%a7%e8%a1%8c%e9%a1%ba%e5%ba%8f&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;子句&lt;/th&gt;
&lt;th&gt;顺序&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;SELECT&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FROM&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;WHERE&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;GROUP BY&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HAVING&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ORDER BY&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;sql-的高端操作&#34;&gt;
  SQL 的高端操作
  &lt;a class=&#34;heading-link&#34; href=&#34;#sql-%e7%9a%84%e9%ab%98%e7%ab%af%e6%93%8d%e4%bd%9c&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SELECT 后别名：可以用 &lt;code&gt;=&lt;/code&gt;或&lt;code&gt;AS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; S.age, age1&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;S.age&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;S.age &lt;span style=&#34;color:#ff79c6&#34;&gt;AS&lt;/span&gt; age2
&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; Sailors S
&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; S.sname &lt;span style=&#34;color:#ff79c6&#34;&gt;LIKE&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;B_%B&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LIKE&lt;/code&gt;:用来模糊匹配字符串；&lt;code&gt;_&lt;/code&gt;表示任一一个字符；&lt;code&gt;%&lt;/code&gt;表示任意多个字符（包括 0 个）；上述表达为 B 开头与结尾长度至少为 3 的字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UNION&lt;/code&gt;:对来能够给目相同的查询结果进行并操作，一般在 WHERE 子句中用&lt;code&gt;OR&lt;/code&gt;代替&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;notice warning&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-exclamation-triangle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Warning
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UNION&lt;/code&gt;操作必须去重，如果允许，在其后加&lt;code&gt;ALL&lt;/code&gt;则不消除结果中的重复项&lt;/li&gt;
&lt;li&gt;多元&lt;code&gt;UNION&lt;/code&gt;操作需要利用圆括号多次使用二元&lt;code&gt;UNION&lt;/code&gt;来实现&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INTERSECT&lt;/code&gt;:对来能够给目相同的查询结果进行取交集操作，一般在 WHERE 子句中用&lt;code&gt;AND&lt;/code&gt;代替&lt;/li&gt;
&lt;li&gt;嵌套查询(Nested Queries):在 FROM,WHERE,HAVING 子句中可以包含 SQL 查询
&lt;ul&gt;
&lt;li&gt;( NOT ) IN：前面有个主语,下例寻找定了 103 号船的水手姓名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; S.sname
&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; Sailors S
&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; S.sid &lt;span style=&#34;color:#ff79c6&#34;&gt;IN&lt;/span&gt; (
  &lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; R.sid
  &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; Reserves R
  &lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; R.bid&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;103&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(NOT) EXISTS&lt;/code&gt;:相关子查询，&lt;code&gt;EXISTS&lt;/code&gt;后面不为空则&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; S.sname
&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; Sailors S
&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;EXISTS&lt;/span&gt; (
  &lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; Reserves R
  &lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; R.bid&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;103&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;AND&lt;/span&gt; S.sid &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; R.sid
)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ANY&lt;/code&gt;和&lt;code&gt;ALL&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALL&lt;/code&gt;满足范围中所有的则返回 true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ANY&lt;/code&gt;满足范围中任意一个则返回 true,下例寻找得分高于任何一个名叫 Horatio 的水手&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; Sailors S
&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; S.rating &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;ANY&lt;/span&gt; (
  &lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; S2.rating
  &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; Sailors S2
  &lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; S2.sname &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Horatio&amp;#39;&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;div class=&#34;notice question&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-question&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Question
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;好像还有个 EVERY,只遇到一次，或许会做补充&lt;/div&gt;
&lt;/div&gt;

&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;EXECPT&lt;/code&gt;:除操作好像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aggregate Operators(聚集函数)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;COUNT(*)&lt;/code&gt;: 返回表的总条目数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COUNT([DISTINCT] A&lt;/code&gt;):返回[不重复的]A 条目的总数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SUM([DISTINCT] A)&lt;/code&gt;:返回[不重复的]各个 A 属性的和&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AVG([DISTINCT] A)&lt;/code&gt;:返回[不重复的]各个 A 属性的平均值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MAX(A)&lt;/code&gt;:A 属性的最大值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MIN(A)&lt;/code&gt;:A 属性的最小值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;--得分为10的水手的平均
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;AVG&lt;/span&gt;(S.age)
&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; Sailors S
&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; S.rating&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;

&lt;span style=&#34;color:#6272a4&#34;&gt;--找得分最高的水手名字
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; S.sname
&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; Sailors S
&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; S.rating&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(
  &lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;MAX&lt;/span&gt;(S2.rating)
  &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; Sailors S2
)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;group-by-和-order-by-子句应用&#34;&gt;
  &lt;code&gt;GROUP BY&lt;/code&gt; 和 &lt;code&gt;ORDER BY&lt;/code&gt; 子句应用
  &lt;a class=&#34;heading-link&#34; href=&#34;#group-by-%e5%92%8c-order-by-%e5%ad%90%e5%8f%a5%e5%ba%94%e7%94%a8&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;group-by&#34;&gt;
  &lt;code&gt;GROUP BY&lt;/code&gt;
  &lt;a class=&#34;heading-link&#34; href=&#34;#group-by&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;GROUP BY&lt;/code&gt; 目的是让聚集函数作用于特定目标而非整个表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GROUP BY&lt;/code&gt;子句将表按列的值分组，列值相同的一组，若有多个列，则先按第一列分组，再按第二列分组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HAVING&lt;/code&gt;后为选择基本组的条件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;order-by&#34;&gt;
  &lt;code&gt;ORDER BY&lt;/code&gt;
  &lt;a class=&#34;heading-link&#34; href=&#34;#order-by&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对子句中指定的列进行排序，默认升序，&lt;code&gt;ASC&lt;/code&gt;表示升序, &lt;code&gt;DESC&lt;/code&gt;表示降序&lt;/li&gt;
&lt;li&gt;下例举出计算机系所开课程(成绩完整的 GRADE isn&amp;rsquo;t NULL)的最高最低和平均成绩&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; SNO, &lt;span style=&#34;color:#ff79c6&#34;&gt;MAX&lt;/span&gt;(GRADE), &lt;span style=&#34;color:#ff79c6&#34;&gt;MIN&lt;/span&gt;(GRADE), &lt;span style=&#34;color:#ff79c6&#34;&gt;AVG&lt;/span&gt;(GRADE)
&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; SC
&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; CNO &lt;span style=&#34;color:#ff79c6&#34;&gt;LIKE&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;CS%&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;BY&lt;/span&gt; CNO
&lt;span style=&#34;color:#ff79c6&#34;&gt;HAVING&lt;/span&gt; CNO &lt;span style=&#34;color:#ff79c6&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;IN&lt;/span&gt; (
  &lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; CNO
  &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; SC
  &lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; GRADE &lt;span style=&#34;color:#ff79c6&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt;
)
&lt;span style=&#34;color:#ff79c6&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;BY&lt;/span&gt; CNO
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;cast-expression&#34;&gt;
  CAST expression
  &lt;a class=&#34;heading-link&#34; href=&#34;#cast-expression&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;就是一些强制类型转换，&lt;code&gt;CAST (NULL AS Varchar(20))&lt;/code&gt;把 NULL 转字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;case-expression&#34;&gt;
  CASE expression
  &lt;a class=&#34;heading-link&#34; href=&#34;#case-expression&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;PPT 上例子都是放在&lt;code&gt;SELECT&lt;/code&gt;子句后，作用就和一般的&lt;code&gt;CASE&lt;/code&gt;语句差不多，不考吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;子查询&#34;&gt;
  子查询
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%ad%90%e6%9f%a5%e8%af%a2&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;本节例题所用数据模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dept(deptno, deptname, location)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emp(deptno, salary, bonus)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;标量子查询scalar-sub-query&#34;&gt;
  标量子查询(Scalar sub-query)
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%a0%87%e9%87%8f%e5%ad%90%e6%9f%a5%e8%af%a2scalar-sub-query&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;返回值只有一个单值，不是元组；can be used in the place where a value can occur&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;寻找平均奖金高于平均薪水的部门的名字&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; d.deptname
&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; dept &lt;span style=&#34;color:#ff79c6&#34;&gt;AS&lt;/span&gt; d
&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; (
  &lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;avg&lt;/span&gt;(bonus)&lt;span style=&#34;color:#6272a4&#34;&gt;--这里返回的是个单值
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; emp
  &lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; deptno &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; d.deptno)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; (
  &lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;avg&lt;/span&gt;(salary)
  &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; emp
  &lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; deptno &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; d.deptno
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;表表达式table-expression&#34;&gt;
  表表达式(Table expression)
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%a1%a8%e8%a1%a8%e8%be%be%e5%bc%8ftable-expression&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;返回的是一个临时表(视图);can be used in the place where a table can occur&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;寻找总收入过两万的部门&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt;  deptno, totalpay
&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; (
  &lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; deptno, &lt;span style=&#34;color:#ff79c6&#34;&gt;SUM&lt;/span&gt;(salay) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SUM&lt;/span&gt;(bonus) &lt;span style=&#34;color:#ff79c6&#34;&gt;AS&lt;/span&gt; totalpay
  &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; emp
  &lt;span style=&#34;color:#ff79c6&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;BY&lt;/span&gt; deptno) &lt;span style=&#34;color:#ff79c6&#34;&gt;AS&lt;/span&gt; payrool
&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; totalpay &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;公用表表达式common-table-expression&#34;&gt;
  公用表表达式(Common table expression)
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%85%ac%e7%94%a8%e8%a1%a8%e8%a1%a8%e8%be%be%e5%bc%8fcommon-table-expression&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;有一个表被用了很多次，则可使用&lt;code&gt;WITH&lt;/code&gt;子句来定义它，是个临时的视图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;寻找有最高收入的部门&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;WITH&lt;/span&gt; payroll(deptno, totalpay) &lt;span style=&#34;color:#ff79c6&#34;&gt;AS&lt;/span&gt; (
  &lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; deptno, &lt;span style=&#34;color:#ff79c6&#34;&gt;SUM&lt;/span&gt;(salary) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SUM&lt;/span&gt;(bonus)
  &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; emp
  &lt;span style=&#34;color:#ff79c6&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;BY&lt;/span&gt; deptno
)
&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; deptno
&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; payroll&lt;span style=&#34;color:#6272a4&#34;&gt;--这里使用一次
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; totalpay &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (
  &lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;max&lt;/span&gt;(totalpay)
  &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; payroll&lt;span style=&#34;color:#6272a4&#34;&gt;--这里又使用一次
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;递归查询&#34;&gt;
  递归查询
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%80%92%e5%bd%92%e6%9f%a5%e8%af%a2&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;如果一个临时表在其定义中引用了自己，则发生递归;分为三步，初始查询，递归查询，终止查询&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;寻找所有在 Hoover 管理下的薪水超过 100000 的员工&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;WITH&lt;/span&gt; agents(name, salary) &lt;span style=&#34;color:#ff79c6&#34;&gt;AS&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;--Inital query
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;((&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; name, salary
&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; FedEmp
&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; manager&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hoover&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;ALL&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;--Recursive query
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; f.name, f.salary
&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; agents &lt;span style=&#34;color:#ff79c6&#34;&gt;AS&lt;/span&gt; a, FedEmp &lt;span style=&#34;color:#ff79c6&#34;&gt;AS&lt;/span&gt; f
&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; f.manager &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; a.name))
&lt;span style=&#34;color:#6272a4&#34;&gt;--Final query
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; name
&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; agents
&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; salary&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;100000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;notice info&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-exclamation-circle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Info
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;&lt;p&gt;这里应该还有外连接的 SQL 操作已经递归查询，但他妈的太复杂了,有心情写&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;递归查询好像挺重要，稍后攻克&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;35-数据操纵语言data-manipulation-language&#34;&gt;
  3.5 数据操纵语言(Data Manipulation Language)
  &lt;a class=&#34;heading-link&#34; href=&#34;#35-%e6%95%b0%e6%8d%ae%e6%93%8d%e7%ba%b5%e8%af%ad%e8%a8%80data-manipulation-language&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Insert a tuple into a table&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;INTO&lt;/span&gt; EMPLOYEES &lt;span style=&#34;color:#ff79c6&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;John&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;1980-06-10&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Los Angles&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;45000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Delete tuples fulfill qualifications&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;DELETE&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; Person
&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; LastName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Rasmussen&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Update the attributes&#39; value of tuples fulfill qualifications&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;UPDATE&lt;/span&gt; Person
&lt;span style=&#34;color:#ff79c6&#34;&gt;SET&lt;/span&gt; Address &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Zhongshan23&amp;#39;&lt;/span&gt;, City &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Nanjing&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; LastName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Wilson
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;36-嵌入式-sqlin-c&#34;&gt;
  3.6 嵌入式 SQL(in C)
  &lt;a class=&#34;heading-link&#34; href=&#34;#36-%e5%b5%8c%e5%85%a5%e5%bc%8f-sqlin-c&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;由于ISQL功能受限于数据库操作,缺少数据处理能力。这种能力宿主语言有呀，所以就把SQL嵌入到宿主语言中去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;notice note&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-sticky-note&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Note
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;&lt;h4 id=&#34;嵌入式sql的要解决的四个问题&#34;&gt;
  嵌入式SQL的要解决的四个问题：
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%b5%8c%e5%85%a5%e5%bc%8fsql%e7%9a%84%e8%a6%81%e8%a7%a3%e5%86%b3%e7%9a%84%e5%9b%9b%e4%b8%aa%e9%97%ae%e9%a2%98&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;宿主语言编译器无法识别和接受SQL语言
&lt;ul&gt;
&lt;li&gt;用&lt;code&gt;EXEC SQL...;&lt;/code&gt;来标识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;宿主语言程序和DBMS之间信息数据传输
&lt;ul&gt;
&lt;li&gt;宿主变量，在SQL中加&lt;code&gt;:&lt;/code&gt;标识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查询结果为元组集合，须逐个赋值给宿主语言中的变量
&lt;ul&gt;
&lt;li&gt;游标方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;两者数据类型不完全对应，须解决数据类型转换问题
&lt;ul&gt;
&lt;li&gt;就解决呗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;嵌入式sql的说明部分&#34;&gt;
  嵌入式SQL的说明部分
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%b5%8c%e5%85%a5%e5%bc%8fsql%e7%9a%84%e8%af%b4%e6%98%8e%e9%83%a8%e5%88%86&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SQL语句以&lt;code&gt;EXEC SQL&lt;/code&gt;开头，&lt;code&gt;;&lt;/code&gt;结尾。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据的传送通过宿主变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;宿主变量申明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统定义者:&lt;code&gt;SQLCA&lt;/code&gt;(SQL Communication Area);其有个分量&lt;code&gt;SQLCODE&lt;/code&gt;,它是一个整数，DBMS向应用程序报告SQL语句执行结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&amp;lt;0&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;=0&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&amp;gt;0&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;100&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;错误未执行，负数值表示错误类型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无异常执行&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;执行但有异常，值表示异常类型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无值可取，可能没有符合条件的值也可能取完了&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;使用时直接包含即可&lt;code&gt;EXEC SQL INCLUDE SQLCA&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般的宿主变量声明,开头&lt;code&gt;EXEC SQL BEGIN DECLARE SECTION&lt;/code&gt;, 结尾&lt;code&gt;EXEC SQL END DECLARE SECTION&lt;/code&gt;;宿主变量可以与表的列名同名，SQL语句中使用宿主变量时前面要加&lt;code&gt;:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SQL&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;BEGIN&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;DECLARE&lt;/span&gt; SECTION
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;char&lt;/span&gt; SNO[&lt;span style=&#34;color:#bd93f9&#34;&gt;7&lt;/span&gt;];
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;char&lt;/span&gt; CNO[&lt;span style=&#34;color:#bd93f9&#34;&gt;6&lt;/span&gt;];
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;float&lt;/span&gt; GRADE;
  short GRADEI;
&lt;span style=&#34;color:#ff79c6&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SQL&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;END&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;DECLARE&lt;/span&gt; SECTION
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;notice note&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-sticky-note&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Note
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;&lt;ul&gt;
&lt;li&gt;指示变量:indicator,也是宿主变量&lt;/li&gt;
&lt;li&gt;宿主变量不能接受空缺符&lt;code&gt;NULL&lt;/code&gt;,此时在其后跟一个指示变量，其值为负则前面的宿主变量为&lt;code&gt;NULL&lt;/code&gt;,否则不为&lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上例中&lt;code&gt;GRADEI&lt;/code&gt;指示&lt;code&gt;GRADE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;嵌入式sql的可执行语句&#34;&gt;
  嵌入式SQL的可执行语句
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%b5%8c%e5%85%a5%e5%bc%8fsql%e7%9a%84%e5%8f%af%e6%89%a7%e8%a1%8c%e8%af%ad%e5%8f%a5&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进入数据库系统的&lt;code&gt;CONNECT&lt;/code&gt;语句&lt;/li&gt;
&lt;li&gt;嵌入的DDL,QL,DML,DCL&lt;/li&gt;
&lt;li&gt;控制事务结束的语句&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;connect-语句&#34;&gt;
  &lt;code&gt;CONNECT&lt;/code&gt; 语句
  &lt;a class=&#34;heading-link&#34; href=&#34;#connect-%e8%af%ad%e5%8f%a5&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SQL&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;CONNECT&lt;/span&gt; :uid IDENTIFIED &lt;span style=&#34;color:#ff79c6&#34;&gt;BY&lt;/span&gt; :pwd
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;uid与pwd为两宿主变量&lt;/p&gt;
&lt;h4 id=&#34;嵌入的sql&#34;&gt;
  嵌入的SQL
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%b5%8c%e5%85%a5%e7%9a%84sql&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DDL和DML：除了前面加&lt;code&gt;EXEC SQL&lt;/code&gt;外与ISQL没有区别,如&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SQL&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;INTO&lt;/span&gt; SC(SNO, CNO, GRADE)
  &lt;span style=&#34;color:#ff79c6&#34;&gt;VALUES&lt;/span&gt;(:SNO, :CNO, :GRADE)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;QL
&lt;ul&gt;
&lt;li&gt;查询结果为一个数组，直接将查询结果用&lt;code&gt;INTO&lt;/code&gt;子句对宿主变量进行赋值即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SQL&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; GRADE
  &lt;span style=&#34;color:#ff79c6&#34;&gt;INTO&lt;/span&gt; :GRADE, :GRADEI &lt;span style=&#34;color:#6272a4&#34;&gt;--由于查询结果只可能有一个直接赋值即可
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; SC
  &lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; SNO &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; :GIVENSNO &lt;span style=&#34;color:#ff79c6&#34;&gt;AND&lt;/span&gt; CNP &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; :GIVENCNO &lt;span style=&#34;color:#6272a4&#34;&gt;--{SNO, CNO}为主键
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查询结果为超过一个数组新开辟一个区域，存放查询结果的区域及其相应的数据结果称为游标,使用分四步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;说明游标语句&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SQL&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;DECLARE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;cursor&lt;/span&gt; name&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;CURSOR&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;FOR&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; ...
  &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;打开游标语句&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SQL&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;OPEN&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;cursor&lt;/span&gt; name&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;打开游标时，执行与之相关的QL,其结果存于游标中,一经打开即使查询语句中宿主变量值改变，游标值也不会变，除非关闭后重新打开&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取数语句&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SQL&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;FETCH&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;cursor&lt;/span&gt; name&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; 
  &lt;span style=&#34;color:#ff79c6&#34;&gt;INTO&lt;/span&gt; :hostvar1, :hostvar2, ...;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当游标中数取完，&lt;code&gt;SQLCODE&lt;/code&gt;将返回100&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭游标语句&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SQL&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;CLOSE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;cursor&lt;/span&gt; name&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;一个完整的例子,宿主语言是c语言,为了打印一张gpa3.5以上同学的名单。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SQL&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;BEGIN&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;DECLARE&lt;/span&gt; SECTION;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;char&lt;/span&gt; sname[&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;];
&lt;span style=&#34;color:#ff79c6&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SQL&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;END&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;DECLARE&lt;/span&gt; SECTION;

&lt;span style=&#34;color:#ff79c6&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SQL&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;DECLARE&lt;/span&gt; student&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;cursor&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;CURSOR&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;FOR&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;--Step1：声明游标
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; S.sname
  &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; student S
  &lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; S.gpa&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SQL&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;OPEN&lt;/span&gt; student&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;cursor&lt;/span&gt;;              &lt;span style=&#34;color:#6272a4&#34;&gt;--Step2：打开游标
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;while(&lt;span style=&#34;color:#ff79c6&#34;&gt;TRUE&lt;/span&gt;)
{
  &lt;span style=&#34;color:#ff79c6&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SQL&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;FETCH&lt;/span&gt; student&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;cursor&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;INTO&lt;/span&gt; :sname;

  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(SQLCA.&lt;span style=&#34;color:#ff79c6&#34;&gt;SQLCODE&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;--读完了
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    break;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(SQLCA.&lt;span style=&#34;color:#ff79c6&#34;&gt;SQLCODE&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)    &lt;span style=&#34;color:#6272a4&#34;&gt;--出错了
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    break;
  &lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;  ...处理游标中所取的数据
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;  */&lt;/span&gt;
  printf(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;%s\n&amp;#34;&lt;/span&gt;, sname);
};
&lt;span style=&#34;color:#ff79c6&#34;&gt;EXEC&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SQL&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;CLOSE&lt;/span&gt; C1;             &lt;span style=&#34;color:#6272a4&#34;&gt;--Step4：关闭游标
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>数字图像处理大作业</title>
      <link>http://acupofair.github.io/posts/image_process/image_process/</link>
      <pubDate>Sun, 19 Dec 2021 23:32:34 +0800</pubDate>
      
      <guid>http://acupofair.github.io/posts/image_process/image_process/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;数字图像处理的大作业，使用 electron 作为前端框架，后端使用 python 来实现中值滤波， Kuwahara 滤波器(桑原滤波器)，灰度梯度分组技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;


&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/cover.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;h1 id=&#34;数字图像处理大作业基于-electron-框架的多滤波器实现&#34;&gt;
  数字图像处理大作业：基于 electron 框架的多滤波器实现
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%95%b0%e5%ad%97%e5%9b%be%e5%83%8f%e5%a4%84%e7%90%86%e5%a4%a7%e4%bd%9c%e4%b8%9a%e5%9f%ba%e4%ba%8e-electron-%e6%a1%86%e6%9e%b6%e7%9a%84%e5%a4%9a%e6%bb%a4%e6%b3%a2%e5%99%a8%e5%ae%9e%e7%8e%b0&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ACupofAir/filter-app.git&#34;&gt;项目地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;设计背景&#34;&gt;
  设计背景
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%ae%be%e8%ae%a1%e8%83%8c%e6%99%af&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;在经过一学期的数字图像处理课程后，我对数字图像处理的一些方法有所了解，在几次研讨中，我接触到了一些有趣的图像处理手段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在第一次研讨中，我们对 glg(gray-level-grouping)算法进行了研讨，这是一种精妙的对比度增强算法，可以解决传统的对比度增强算法的众多痛点，如参数的调整，方式的选择；而且 fglg 具有极快的速度，非常适合生活中对于夜景图片的快速处理&lt;/li&gt;
&lt;li&gt;最令我印象深刻的便是 Kuwahara 滤波器，它是在第二次研讨中讲解一般的图像平滑化方法时介绍的，经过它滤波后的图片有一种油画的风格，十分美观，这种滤波在我看来可以广泛应用于用户对于 p 图的需求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正是这些滤波的应用场景广泛，而一般的用户是不会使用 matlab 或者 python 去专门做这样的图像处理，一方面这需要一定的编程基础以及数字图像处理技术；另一方面这样的操作是繁琐的。是想没有人愿意为了简单的让图像的对比度增加而打开庞大的 matlab 套件，写上上百行代码。所以在这样的背景下，我设计了这个简单的数字图像处理程序。它将我们课中的研讨内容应用于实际，简化图像对比度增强，图像平滑处理的过程&lt;/p&gt;
&lt;h2 id=&#34;设计思路&#34;&gt;
  设计思路
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%ae%be%e8%ae%a1%e6%80%9d%e8%b7%af&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;设计目标&#34;&gt;
  设计目标
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%ae%be%e8%ae%a1%e7%9b%ae%e6%a0%87&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;易用性原则：有友好的用户界面，所见即所得，操作直观&lt;/li&gt;
&lt;li&gt;可拓展性: 由于目前所学的图像处理技术有限，这样简单的功能是不足以作为一个完整的 app 的，我希望在未来可以拓展这个应用的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;最终设计&#34;&gt;
  最终设计
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9c%80%e7%bb%88%e8%ae%be%e8%ae%a1&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;语言的选择&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在我们的课程中，我们大多采用 matlab 来实现图像处理，而在实际开发中，matlab 能发挥的空间有限。在之前的一次项目中，我尝试用 matlab 做 gui 开发，整个过程是轻松的，但最后导出时，它提供软件包的方式是直接将 matlab 中所使用的库完整的塞如软件包中，这就导致如果你的程序只是简单的 helloworld,它导出的包也有足足 1GB 大小，所以用 matlab 来做软件开发不是一个智慧的选择。&lt;/p&gt;
&lt;p&gt;对于后端来说，除 matlab 外，最适合做图像处理的想必就是 python 了，python 强大的开源社区提供了众多图像处理的包，同时，python 可以利用 pyqt 做桌面端的开发，再各个方面都是很优秀的。有了 python 的加持，在后续将其与人工智能的相关应用起来也会比较方便，具有良好的可拓展性。&lt;/p&gt;
&lt;p&gt;而前端方面，采用了 electron 框架，electron 在近几年大方异彩，诸如 vscode，facebook message,就是基于 electron 开发的。它具有极好的移植性，可以一套代码实现浏览器，windows,macos,linux,android 的全平台开发。所以前端代码我将使用 html, css, javascript 来实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前后端分离设计&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;为了应用良好的拓展性，我采用了前后端分离的架构。前端与后端完全独立，通过连接件来实现前端对后端的调用。&lt;/p&gt;
&lt;p&gt;完整的业务流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前端接受用户对于图片处理的请求，从本地图片库中读取图片。将用户对图片处理的要求以及图片传给后端&lt;/li&gt;
&lt;li&gt;后端按要求处理图片后，将图片转存到本地，并提示前端已经完成操作&lt;/li&gt;
&lt;li&gt;前端在得知已经完成图像处理后，按后端提供的地址去本地找到处理好的图片并显示&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;


&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/arch_filter_app.drawio.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端实现&#34;&gt;
  前端实现
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%89%8d%e7%ab%af%e5%ae%9e%e7%8e%b0&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;由于本软件较为简单，所以直接采取单页面结构即可满足需求。&lt;/p&gt;
&lt;h3 id=&#34;快速搭建&#34;&gt;
  快速搭建
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%bf%ab%e9%80%9f%e6%90%ad%e5%bb%ba&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;首先，我们利用 electron 官方给的脚手架程序进行快速搭建&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Clone this repository&lt;/span&gt;
git clone https://github.com/electron/electron-quick-start
&lt;span style=&#34;color:#6272a4&#34;&gt;# Go into the repository&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; electron-quick-start
&lt;span style=&#34;color:#6272a4&#34;&gt;# Install dependencies&lt;/span&gt;
npm install
&lt;span style=&#34;color:#6272a4&#34;&gt;# Run the app&lt;/span&gt;
npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样我们便有了一个简单的 helloworld 程序。&lt;/p&gt;
&lt;h3 id=&#34;目录重组&#34;&gt;
  目录重组
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%9b%ae%e5%bd%95%e9%87%8d%e7%bb%84&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;对于一个 electron 应用来说，它的程序入口为&lt;code&gt;main.js&lt;/code&gt;，在这个文件中，它会初始化一个窗口，并加载一个 html 文件(所以说 electron 本质就是个浏览器),为了实现我们的前后端分离，我们将所有的界面文件放到 gui 这个文件夹，在 gui 这个文件夹下新建 index.html 用来做我们的单页面。同时在 gui 目录下新建 linkers 目录，用来存放连接件，新建 images 目录存放要处理的图片以及处理后的图片。然后修改&lt;code&gt;main.js&lt;/code&gt;中加载的 html 文件路径为我们 gui 目录下的 html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//main.js
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;mainWindow.loadURL(
  url.format({
    pathname&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; path.join(__dirname, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/gui/index.html&amp;#34;&lt;/span&gt;),
    protocol&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;file:&amp;#34;&lt;/span&gt;,
    slashes&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
  })
);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后我们创建 engine 目录用来存放后端的函数。最终我们项目的目录树如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;├── engine
│   ├── FGLG.py
│   ├── kuw_filter.py
│   ├── mean_filter.py
│   └── __pycache__
├── filter.ico
├── gui
│   ├── background.svg
│   ├── images
│   ├── index.html
│   ├── linkers
│   └── styles.css
├── LICENSE.md
├── main.js
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;布局设计&#34;&gt;
  布局设计
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%b8%83%e5%b1%80%e8%ae%be%e8%ae%a1&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;顶部为软件的名称*&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中间主题部分为两个图像处理框，采用&lt;code&gt;overflow: scroll;&lt;/code&gt;属性，来实现无损预览，当图片大于预览窗口，可以通过滚动滑轮在预览框内移动图片的位置来查看不同部分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;底部为一个输入框，用户需输入需要处理的图片的名称即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入框右边为一个复选框，用户可以选择不同的滤波器来对图像进行不同的处理:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kuwa:桑原滤波器，将图片平滑化处理，类似于油画效果&lt;/li&gt;
&lt;li&gt;glg:灰度梯度分组，提高图片的对比度&lt;/li&gt;
&lt;li&gt;mean:中值滤波，对图片进行降噪处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入框右边是确认按钮，点击后将向后端发送处理图像请求



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-20-03-02-48.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整体布局采用响应式布局，利用 twitter 开源的 bootstrap 框架，让界面可以弹性缩放。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;后端实现&#34;&gt;
  后端实现
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%90%8e%e7%ab%af%e5%ae%9e%e7%8e%b0&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;kuwahara-滤波器实现&#34;&gt;
  Kuwahara 滤波器实现
  &lt;a class=&#34;heading-link&#34; href=&#34;#kuwahara-%e6%bb%a4%e6%b3%a2%e5%99%a8%e5%ae%9e%e7%8e%b0&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;基本原理&#34;&gt;
  基本原理
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e5%8e%9f%e7%90%86&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;计算图像模板中邻域内的均值和方差，选择图像灰度值较为均匀的区域的均值替代模板中心像素灰度值。总的来说模板半径越小，平滑化的效果越好，但相应的复杂度也越高



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-20-03-20-05.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;h4 id=&#34;核心代码&#34;&gt;
  核心代码
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%a0%b8%e5%bf%83%e4%bb%a3%e7%a0%81&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;为了较快的给出结果，我将模板半径固定为 5,这样处理出的图像不至于模糊，同时速度也较快。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;kuwahara&lt;/span&gt;(pic, r&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, resize&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;, rate&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0.5&lt;/span&gt;):
    h, w, _ &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pic&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; resize:
        pic &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; cv2&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;resize(pic, (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(w&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;rate), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(h&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;rate)))
        h, w, _ &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pic&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape
    pic &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;pad(pic, ((r, r), (r, r), (&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)), &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;edge&amp;#34;&lt;/span&gt;)
    ave, var &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; cv2&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;integral2(pic)
    ave &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ((ave[:&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;r&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, :&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;r&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;ave[r&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;:, r&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;:] &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;
           ave[r&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;:, :&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;r&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;ave[:&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;r&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, r&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;:])&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;(r&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)
    var &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ((var[:&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;r&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, :&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;r&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;var[r&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;:, r&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;:]&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;var[r&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;:, :&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;r&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;
           var[:&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;r&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, r&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;:])&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;(r&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;ave&lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sum(axis&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)

    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;filt&lt;/span&gt;(i, j):
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;array([ave[i, j], ave[i&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;r, j], ave[i, j&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;r], ave[i&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;r, j&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;r]])[(np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;array([var[i, j], var[i&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;r, j], var[i, j&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;r], var[i&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;r, j&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;r]])&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;argmin(axis&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;flatten(), j&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;flatten(), i&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;flatten())]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;reshape(w, h, _)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;transpose(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)
    filtered_pic &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; filt(
        &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;meshgrid(np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;arange(h), np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;arange(w)))&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;astype(pic&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;dtype)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; filtered_pic
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;fglg-实现&#34;&gt;
  fglg 实现
  &lt;a class=&#34;heading-link&#34; href=&#34;#fglg-%e5%ae%9e%e7%8e%b0&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;基本原理-1&#34;&gt;
  基本原理
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e5%8e%9f%e7%90%86-1&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;灰度分组（GLG）基本步骤是先将低对比度图像的直方图分量按照选定的准则分组为适当数量的 bins，然后将这些 bins 均匀地分布在灰度上，最后将之前分组的灰度级解分组。其基本步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对强度非零组进行分组&lt;/li&gt;
&lt;li&gt;确定每组的左边界与右边界&lt;/li&gt;
&lt;li&gt;寻找最小组进行合并&lt;/li&gt;
&lt;li&gt;计算组间间距&lt;/li&gt;
&lt;li&gt;通过间距乘以组号来定位每组位置
由于 glg 分组的组数是遍历所有可能，而合并又需遍历，所以复杂度为 $\mathcal{O}(n^2)$ ,而实际上经过大量实验发现在分组数过高时对图像对比度的增强已经没有太大帮助，实际上只需将分组固定为自己 20 组左右，就可以取得很好的效果，所以在固定分组数后复杂度为$\mathcal{O}(n)$,这就是 fglg 算法&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;核心代码-1&#34;&gt;
  核心代码
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%a0%b8%e5%bf%83%e4%bb%a3%e7%a0%81-1&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;代码过长，感兴趣可以阅读源码，具体的讲解在第一次研讨中已经汇报过了，当时用的是 matlab 实现的，python 版本和它基本没有太大区别&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;fglg&lt;/span&gt;(img):

    height, width &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; img&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shape
    Npix &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; height &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; width
    hist &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; cv2&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;calcHist([img], [&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;, [&lt;span style=&#34;color:#bd93f9&#34;&gt;256&lt;/span&gt;], [&lt;span style=&#34;color:#bd93f9&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;255.0&lt;/span&gt;])

    &lt;span style=&#34;color:#6272a4&#34;&gt;# show histogram of the original image&lt;/span&gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;#plt.hist(hist.flatten(), 256)&lt;/span&gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;# plt.show()&lt;/span&gt;
    temp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]
    temp_gray_level &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;zeros(M)
    cnt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(M):
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; hist[i] &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;:
            temp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(hist[i])
            temp_gray_level[cnt] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; i
            cnt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; cnt &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
    n &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(temp) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
    G &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(n&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)]
    gray_level &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(n&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; __ &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(n&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)]
    G[n] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; temp
    gray_level[n] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; temp_gray_level
    L &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(n&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)]
    R &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(n&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)]
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(M):
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; hist[k] &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;:
            L[n]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(k)
            R[n]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(k)
    T &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(M&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)]

    &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;=&lt;/span&gt; GROUP:
        &lt;span style=&#34;color:#6272a4&#34;&gt;# compute Gn-1,Ln-1,Rn-1,i&amp;#39;&lt;/span&gt;
        a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;min&lt;/span&gt;(G[n][&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;:n&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;])
        ia &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; G[n]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;index(a)
        left &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; ia &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;:
            b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; G[n][ia&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]
            left &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;elif&lt;/span&gt; ia &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; n:
            b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; G[n][ia&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]
        &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; G[n][ia&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt; G[n][ia&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]:
                b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; G[n][ia&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]
                left &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
            &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
                b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; G[n][ia&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]
                left &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; left:
            ii &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ia &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
            ii &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ia
        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, ii):
            G[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(G[n][i])
            gray_level[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][i] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; gray_level[n][i]
        G[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(a&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;b)
        gray_level[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][ii] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; gray_level[n][ii]
        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(ii&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, n):
            G[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(G[n][i&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;])
            gray_level[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][i] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; gray_level[n][i&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]

        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, ii&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;):
            L[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(L[n][i])
        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(ii&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, n):
            L[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(L[n][i&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;])

        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, ii):
            R[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(R[n][i])
        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(ii, n):
            R[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(R[n][i&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;])
        n &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;

    n &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; L[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; R[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]:
        N &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (M &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;float&lt;/span&gt;(n &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
        N &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (M &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;float&lt;/span&gt;(n &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; ALPHA)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;, M):
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt; L[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]:
            T[k] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#ff79c6&#34;&gt;continue&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;=&lt;/span&gt; R[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]:
            T[k] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; M &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#ff79c6&#34;&gt;continue&lt;/span&gt;
        i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, n):
            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;=&lt;/span&gt; L[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][x] &lt;span style=&#34;color:#ff79c6&#34;&gt;and&lt;/span&gt; k &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; R[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][x]:
                i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; x
                &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;and&lt;/span&gt; L[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][i] &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; R[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][i]:
                    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; L[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; R[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]:
                        ans &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(
                            (i &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; ALPHA &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; (R[n &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][i] &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; k) &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;float&lt;/span&gt;(R[n &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][i] &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; L[n &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][i])) &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;float&lt;/span&gt;(N) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0.5&lt;/span&gt;)
                        T[k] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ans
                    &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
                        ans &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(
                            (i &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; (R[n &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][i] &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; k) &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;float&lt;/span&gt;(R[n &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][i] &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; L[n &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][i])) &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;float&lt;/span&gt;(N) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0.5&lt;/span&gt;)
                        T[k] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ans
                &lt;span style=&#34;color:#ff79c6&#34;&gt;elif&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;and&lt;/span&gt; L[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][i] &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; R[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][i]:
                    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; L[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; R[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]:
                        T[k] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(((i &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; ALPHA) &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;float&lt;/span&gt;(N)) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0.5&lt;/span&gt;)
                    &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
                        T[k] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;((i &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;float&lt;/span&gt;(N)) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0.5&lt;/span&gt;)
            &lt;span style=&#34;color:#ff79c6&#34;&gt;elif&lt;/span&gt; k &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; R[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][x]:
                i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; x
                &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; L[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; R[n&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]:
                    T[k] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(((&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;float&lt;/span&gt;(i) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; ALPHA) &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;float&lt;/span&gt;(N)) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0.5&lt;/span&gt;)
                &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
                    T[k] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;((i &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;float&lt;/span&gt;(N)) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0.5&lt;/span&gt;)
             &lt;span style=&#34;color:#6272a4&#34;&gt;# There can be delete&lt;/span&gt;
            &lt;span style=&#34;color:#6272a4&#34;&gt;# if i == 0:&lt;/span&gt;
             &lt;span style=&#34;color:#6272a4&#34;&gt;#   T[n-1][k] = T[n-1][k-1]&lt;/span&gt;
    D &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Trans_and_CalcD(hist, T)

    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; T, D&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;float&lt;/span&gt;(Npix) &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; (Npix &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;中值滤波实现&#34;&gt;
  中值滤波实现
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%b8%ad%e5%80%bc%e6%bb%a4%e6%b3%a2%e5%ae%9e%e7%8e%b0&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;基本原理-2&#34;&gt;
  基本原理
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e5%8e%9f%e7%90%86-2&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;采用观察窗中的中值作为输出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;流程
&lt;ol&gt;
&lt;li&gt;采用个奇数个采样组成观察窗口&lt;/li&gt;
&lt;li&gt;对窗口中值进行排序，并选取中值输出&lt;/li&gt;
&lt;li&gt;丢弃最早的值，取得新的采样，然后重复 1,2&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;示例
$$
x = [2 80 6 3]\\
y[1] = Median[2 2 80] = 2\\
y[2] = Median[2 80 6] = Median[2 6 80] = 6\\
y[3] = Median[80 6 3] = Median[3 6 80] = 6\\
y[4] = Median[6 3 3] = Median[3 3 6] = 3\\
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是 y = [2 6 6 3], 其中 y 是 x 的中值滤波输出&lt;/p&gt;
&lt;h2 id=&#34;连接件&#34;&gt;
  连接件
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%bf%9e%e6%8e%a5%e4%bb%b6&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;在前后端实现后，整个项目最关键的点是如何将其打通,为解决这个问题，我参考了 youtube 上一篇教程&lt;a href=&#34;https://www.youtube.com/watch?v=627VBkAhKTc&#34;&gt;here&lt;/a&gt;,答案是&lt;code&gt;python-shell&lt;/code&gt;。借助 python-shell 库，我们可以实现在 javascript 里调用 python 函数，而 js 正是也自然而然承担其连接前后端的重用。&lt;/p&gt;
&lt;p&gt;首先我们需要倒入&lt;code&gt;python-shell&lt;/code&gt;库。在项目根目录的&lt;code&gt;preload.js&lt;/code&gt;中引入该库。&lt;code&gt;preload.js&lt;/code&gt;为 electron 默认的预加载文件，若没有直接创建即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; { PythonShell } &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;python-shell&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;下面的代码展示了如何使用 PythonShell。我们利用 PythonShell 来实例化一个对象&lt;code&gt;pyshell&lt;/code&gt;,它传入了我们要调用的 python 函数文件名以及要处理的图片名,同时我们利用 javascript 中 on 事件来反馈函数执行的情况，它会将调用的 python 函数的 print 的内容以 alert 的方式提供给用户。swal 是一个 alert 的样式，在 index.html 中引入如下代码即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://unpkg.com/sweetalert/dist/sweetalert.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; filter() {
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; imgName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;imgname&amp;#34;&lt;/span&gt;).value;
  &lt;span style=&#34;color:#6272a4&#34;&gt;// Show preview of origin img
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; img_url &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; path.join(__dirname, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;images&amp;#34;&lt;/span&gt;, imgName);
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;img-prev-div&amp;#34;&lt;/span&gt;).setAttribute(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;, img_url);
  &lt;span style=&#34;color:#6272a4&#34;&gt;// Call the func of kuw python script
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; options &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
    scriptPath&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; path.join(__dirname, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;../engine/&amp;#34;&lt;/span&gt;),
    args&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [imgName],
  };
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; pyshell &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; PythonShell(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;kuw_filter.py&amp;#34;&lt;/span&gt;, options);
  pyshell.on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (message) {
    swal(message);
  });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;之后我们需要在 python 文件中配置传入的文件名参数&lt;code&gt;imgname = sys.argv[1]&lt;/code&gt;,一行代码就传入了文件名，经过转化后我们即可拿到图片&lt;/p&gt;
&lt;p&gt;至此我们的前后端完全打通，程序也可以运行。&lt;/p&gt;
&lt;h2 id=&#34;程序运行&#34;&gt;
  程序运行
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%a8%8b%e5%ba%8f%e8%bf%90%e8%a1%8c&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;编译这个项目&#34;&gt;
  编译这个项目
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%bc%96%e8%af%91%e8%bf%99%e4%b8%aa%e9%a1%b9%e7%9b%ae&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先我使用的 node 版本和 npm 版本如下，如果不同可能会编译失败，建议使用 nvm 来控制一下 node 版本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;❯ node --version
v16.13.1

❯ npm --version
8.1.2
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在项目根目录下执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;npm install
npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关闭 devtool&lt;/p&gt;
&lt;p&gt;为了方便调试，我默认开启了 devtool，在&lt;code&gt;main.js&lt;/code&gt;中注释掉这行即可,若要在运行时开启点击顶部菜单栏view-&amp;gt;toggle devtool，默认快捷键为&lt;code&gt;Ctrl+Shift+i&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;mainWindow.webContents.openDevTools();
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;程序运行结果&#34;&gt;
  程序运行结果
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%a8%8b%e5%ba%8f%e8%bf%90%e8%a1%8c%e7%bb%93%e6%9e%9c&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;由于设计原因，所以图片都存储于images这个文件夹，如果你要使用自定义的照片，请将它放入该文件夹后，在输入框中输入图片名（需要后缀），然后选择你想使用的滤波器，点击绿色Go按钮后即可。&lt;/li&gt;
&lt;li&gt;另外首次使用由于程序读取处理后的图片和处理图片的过程是并发的，而处理图片的速度慢于读取速度，故会发生图片加载不出来的问题，但只要有蓝色alert done提示,则说明图片已经处理好了，这时&lt;code&gt;ctrl+r&lt;/code&gt;刷新页面重复一下操作图片即可正确显示&lt;/li&gt;
&lt;li&gt;中值滤波时间较长，点击后耐心等待大约十秒左右，在弹出蓝色Done窗口后再刷新。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;桑原滤波



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-20-04-27-34.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;灰度分组



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-20-04-29-05.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;中值滤波



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-20-04-35-03.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实验总结&#34;&gt;
  实验总结
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%ae%9e%e9%aa%8c%e6%80%bb%e7%bb%93&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本次实验融合我在数字图像课程中学到的知识，以及研讨的成果，来实现了这个简单的软件；让我看到了数字图像处理在现实生活中是如此有用。&lt;/li&gt;
&lt;li&gt;不足之处：程序本身由于时间的紧迫还有很多不足与bug,这将是我未来具有空闲时间将要弥补的地方
&lt;ul&gt;
&lt;li&gt;javascript异步加载图片导致显示不出的问题&lt;/li&gt;
&lt;li&gt;优化中值滤波，它的耗时过长&lt;/li&gt;
&lt;li&gt;图片的存储位置随机化，通过拖入窗口来直接获取图片的位置&lt;/li&gt;
&lt;li&gt;界面美化&lt;/li&gt;
&lt;li&gt;滤波器目前只有三个，过少，未来可以拓展&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可圈可点
&lt;ul&gt;
&lt;li&gt;拓展性良好，后端代码增加后，只需简单几句添加连接件就可以实现新的滤波算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>DBMS-Chp4&amp;5&amp;6</title>
      <link>http://acupofair.github.io/posts/dbms/chp4_5_6/</link>
      <pubDate>Sun, 05 Dec 2021 12:15:45 +0800</pubDate>
      
      <guid>http://acupofair.github.io/posts/dbms/chp4_5_6/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;数据库复习专用，万恶的王帅，还我周末&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;😠&lt;/p&gt;
&lt;h1 id=&#34;第四章-数据库管理系统引论&#34;&gt;
  第四章 数据库管理系统引论
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ac%ac%e5%9b%9b%e7%ab%a0-%e6%95%b0%e6%8d%ae%e5%ba%93%e7%ae%a1%e7%90%86%e7%b3%bb%e7%bb%9f%e5%bc%95%e8%ae%ba&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;41-dbms的核心组件&#34;&gt;
  4.1 DBMS的核心组件
  &lt;a class=&#34;heading-link&#34; href=&#34;#41-dbms%e7%9a%84%e6%a0%b8%e5%bf%83%e7%bb%84%e4%bb%b6&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;


&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-05-12-41-46.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;从上而下的解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户写的应用程序经过接口转为基础的数据库语言（SQL等）&lt;/li&gt;
&lt;li&gt;SQL经过词法及语法分析产生语法树&lt;/li&gt;
&lt;li&gt;之后检查用户是否有权访问语法树涉及的数据对象，若通过则继续执行，否则拒绝执行&lt;/li&gt;
&lt;li&gt;授权检查通过后，进行语义分析与处理，对四种语言分别做不同处理（通常统称为查询处理），其中QL最复杂也最基本，存在多种存取路径选择问题（查询优化）
后就形成SQL语句执行&lt;/li&gt;
&lt;li&gt;DLL： 存放SQL的动态链接库&lt;/li&gt;
&lt;li&gt;并发控制： SQL语句执行过程都有并发控制以防止多用户并发访问数据引起数据不一致&lt;/li&gt;
&lt;li&gt;恢复机制：发生故障时，能使数据库恢复到最近的一致状态或先前的某个一致状态&lt;/li&gt;
&lt;li&gt;DBMS是操作系统之上的软件系统，是操作系统的用户,它对系统资源的调用需要请求操作系统为其服务，通过系统调用来实现&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;notice info&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-exclamation-circle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Info
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;&lt;h4 id=&#34;补充--事务概念&#34;&gt;
  补充&amp;ndash;事务概念
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%a1%a5%e5%85%85--%e4%ba%8b%e5%8a%a1%e6%a6%82%e5%bf%b5&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;事务是DBMS的执行单位，由有限的数据库操作序列组成，满足ACID准则
ACID准则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;( Atomic )执行的原子性
&lt;ul&gt;
&lt;li&gt;不允许事务部分地完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(Consistency)更新操作的保持一致性
&lt;ul&gt;
&lt;li&gt;事务应使数组库从一个一致状态转到另一个一致状态。如一个帐号收支之差应等于余额，若对这个帐号只拨款，不改余额，则数据库就不一致了。（一致状态也就是数据要满足完整性约束）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(Isolation)彼此的隔离性
&lt;ul&gt;
&lt;li&gt;若多个事务并发执行，则应像各个事务独立执行一样&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(Durability)作用的持久性
&lt;ul&gt;
&lt;li&gt;事务对数据库的影响是持久的，即使数据库因故障受到破坏，DBMS应该也能使其恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;42-dbms的进程结构&#34;&gt;
  4.2 DBMS的进程结构
  &lt;a class=&#34;heading-link&#34; href=&#34;#42-dbms%e7%9a%84%e8%bf%9b%e7%a8%8b%e7%bb%93%e6%9e%84&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;单进程结构&#34;&gt;
  单进程结构
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8d%95%e8%bf%9b%e7%a8%8b%e7%bb%93%e6%9e%84&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;一个应用程序经过DBMS编译后作为一个单独的可执行文件，以一个单独进程进行执行。DBMS core作为这个可执行文件的一个函数



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-05-14-59-22.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;h3 id=&#34;多进程结构&#34;&gt;
  多进程结构
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%a4%9a%e8%bf%9b%e7%a8%8b%e7%bb%93%e6%9e%84&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个应用程序进程对应一个DBMS core进程



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-05-14-59-35.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只有一个DBMS core进程，每个应用程序进程对应一个DBMS线程



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-05-14-59-50.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;43-数据库访问管理&#34;&gt;
  4.3 数据库访问管理
  &lt;a class=&#34;heading-link&#34; href=&#34;#43-%e6%95%b0%e6%8d%ae%e5%ba%93%e8%ae%bf%e9%97%ae%e7%ae%a1%e7%90%86&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;访问类型&#34;&gt;
  访问类型
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%ae%bf%e9%97%ae%e7%b1%bb%e5%9e%8b&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;查询一个文件的全部或大部分记录(&amp;gt;15%)&lt;/li&gt;
&lt;li&gt;查询某一条特定记录&lt;/li&gt;
&lt;li&gt;查询某些记录(&amp;lt;15%)&lt;/li&gt;
&lt;li&gt;范围查询&lt;/li&gt;
&lt;li&gt;记录的更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文件管理&#34;&gt;
  文件管理
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%96%87%e4%bb%b6%e7%ae%a1%e7%90%86&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;文件的基本类型&#34;&gt;
  文件的基本类型
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%96%87%e4%bb%b6%e7%9a%84%e5%9f%ba%e6%9c%ac%e7%b1%bb%e5%9e%8b&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;堆文件
&lt;ul&gt;
&lt;li&gt;记录按插入顺序存放，就像堆货物一样。物理地址不一定连续，逻辑地址连续。插入容易，查找难，只能顺序搜索，删除麻烦，一般不在物理上删除，只是打删除标志，以免引起大量记录转移。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;直接文件
&lt;ul&gt;
&lt;li&gt;将记录某一属性（一般为主键）用散列函数映射成记录的地址。按散列键访问快，但不同散列键可能映射同一地址，且只对散列键到记录的访问有效，键映射空间固定，不变处理变长记录，用得少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;索引文件
&lt;ul&gt;
&lt;li&gt;索引+堆文件/簇集&lt;/li&gt;
&lt;li&gt;在记录的某一属性（组）上建立索引，索引项由索引键的值及其对应的记录的地址货地址集组成。&lt;/li&gt;
&lt;li&gt;提高查询效率，增加索引维护开销，付出储存空间代价&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;动态索引&#34;&gt;
  动态索引
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8a%a8%e6%80%81%e7%b4%a2%e5%bc%95&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;静态索引是多分树，动态索引是平衡多分树(B-Tree),常用的是B+树&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;notice info&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-exclamation-circle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Info
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;&lt;h4 id=&#34;b-tree和b-tree区别&#34;&gt;
  B-Tree和B+-Tree区别
  &lt;a class=&#34;heading-link&#34; href=&#34;#b-tree%e5%92%8cb-tree%e5%8c%ba%e5%88%ab&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;B-Tree
&lt;ul&gt;
&lt;li&gt;键值不可重复存储，没有重复的键和记录&lt;/li&gt;
&lt;li&gt;B树的优势是当你要查找的值恰好处在一个非叶子节点时，查找到该节点就会成功并结束查询&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B+-Tree
&lt;ul&gt;
&lt;li&gt;键是存在内部节点的索引&lt;/li&gt;
&lt;li&gt;记录存在于叶节点&lt;/li&gt;
&lt;li&gt;平衡二叉树，所有叶节点同高&lt;/li&gt;
&lt;li&gt;叶节点用链表连接,所以&lt;strong&gt;支持range-query(区间查询)非常方便，而B树不支持。这是数据库选用B+树的最主要原因&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在B+树中，无论查找成功与否，都是走了一条从根到叶子节点的路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&#34;动态散列应该不考&#34;&gt;
  动态散列(应该不考)
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8a%a8%e6%80%81%e6%95%a3%e5%88%97%e5%ba%94%e8%af%a5%e4%b8%8d%e8%80%83&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;h4 id=&#34;栅格结构文件不考吧&#34;&gt;
  栅格结构文件(不考吧)
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%a0%85%e6%a0%bc%e7%bb%93%e6%9e%84%e6%96%87%e4%bb%b6%e4%b8%8d%e8%80%83%e5%90%a7&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;适合多属性查询&lt;/p&gt;
&lt;h4 id=&#34;raw-disk&#34;&gt;
  Raw disk
  &lt;a class=&#34;heading-link&#34; href=&#34;#raw-disk&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Can control physical blocks in OS by using raw disk&lt;/p&gt;
&lt;h2 id=&#34;44-查询优化&#34;&gt;
  4.4 查询优化
  &lt;a class=&#34;heading-link&#34; href=&#34;#44-%e6%9f%a5%e8%af%a2%e4%bc%98%e5%8c%96&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;代数优化&#34;&gt;
  代数优化
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%bb%a3%e6%95%b0%e4%bc%98%e5%8c%96&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优化原则
&lt;ol&gt;
&lt;li&gt;先一元操作，后二元操作(Push down the unary operations as low as possible)&lt;/li&gt;
&lt;li&gt;优先连接小关系(Look for and combine the common sub-expression)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;查询树
&lt;ul&gt;
&lt;li&gt;叶子： 关系&lt;/li&gt;
&lt;li&gt;中间节点：一元或二元操作&lt;/li&gt;
&lt;li&gt;叶子$\rightarrow$根:操作执行的顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例子



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-05-21-50-26.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;操作优化&#34;&gt;
  操作优化
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%93%8d%e4%bd%9c%e4%bc%98%e5%8c%96&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;代数优化不涉及存取路径，只能对操作次序和组合进行变换与调整;合理选择存取路径，才是优化的重点,以下四个不做讨论&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择操作优化&lt;/li&gt;
&lt;li&gt;投影操作优化&lt;/li&gt;
&lt;li&gt;集合操作优化&lt;/li&gt;
&lt;li&gt;连接操作优化&lt;/li&gt;
&lt;li&gt;组合操作优化&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;连接操作的实现&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;因为连接开销很大，其中二元连接最基本用的最多，所以历来是查询优化研究重点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;嵌套循环法&lt;/strong&gt;：就一个一个拿出来比较，相同的作为结果输出，两层循环
&lt;ul&gt;
&lt;li&gt;R为外关系，共$b_R$条记录，S为内关系，共$b_S$条记录,R每次I/O取出的为缓冲块大小的元组个数，设有$n_B$个缓冲块,一块用于内关系缓冲，其余用于外关系缓冲,则共需访问物理块数,从公式可以看出要想减少I/O次数，应该让小关系作为内关系，因为它前面有个乘数。
$$
b_R + \frac{b_R}{n_B - 1} * b_S
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;notice question&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-question&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Question
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;&lt;ul&gt;
&lt;li&gt;为什么缓存块都给外缓冲？&lt;/li&gt;
&lt;li&gt;因为，&lt;strong&gt;内关系的扫描次数取决于外关系分多少次取完，外关系每次取的越多，则内关系一次扫描所比较的元组也越多&lt;/strong&gt;。而内关系每次扫描都要I/O整个表，而总的I/O次数中外关系的I/O次数是定值（它只用扫描一次），内关系的I/O次数只取决于其扫描次数$\rightarrowtail$其扫描次数只取决于外关系取的次数$\rightarrowtail$外关系取的次数取决于每次取多少，所以增大外缓冲能有效减小内关系扫描次数。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;


&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-26-14-48-37.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;利用索引或散列寻找匹配元组法：通过内关系多次顺序扫描匹配元组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;排序归并法：先将R，S按属性排序，这样后面搜匹配项时就不用看前面的了



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-06-01-02-14.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;散列连接法：连接属性应有相同域，所以将连接属性散列到同一个文件，这样符合条件的R与S元组必然在一个桶中，然后用嵌套循环法就可以得到匹配结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优化策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;俩关系已按属性排序，优先考虑排序归并法。一个以排序，另一个很小，则也可用排序归并法&lt;/li&gt;
&lt;li&gt;若两关系有一个关系在连接属性上有索引或散列，则可以另一关系为外关系，顺序扫描，并利用内关系上索引或散列寻找匹配元组&lt;/li&gt;
&lt;li&gt;若上述都不满足，且关系比较小，用嵌套循环法；否则，可用散列连接法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;45-数据库恢复&#34;&gt;
  4.5 数据库恢复
  &lt;a class=&#34;heading-link&#34; href=&#34;#45-%e6%95%b0%e6%8d%ae%e5%ba%93%e6%81%a2%e5%a4%8d&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;数据库恢复途径：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预防：减少可能发生的失败&lt;/li&gt;
&lt;li&gt;解决：从失败中恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;基础介绍&#34;&gt;
  基础介绍
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%9f%ba%e7%a1%80%e4%bb%8b%e7%bb%8d&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定期转储（单纯以后备副本为基础的恢复技术）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每隔一段时间进行一次全量备份&lt;/li&gt;
&lt;li&gt;改进：增量转储，每次全量转储后，只对改变部分进行转储



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-26-15-11-58.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;backup+log（以后备副本和运行记录(log/journal)为基础的恢复技术）&lt;/p&gt;
&lt;p&gt;log 的内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BI(前像)：事务更新时所涉及物理块更新前的映像；有前像可使数据库回到更新前状态，即撤销更新undo,满足幂等性,就是无论undo几次都和undo一次的效果一样
$$
undo(undo(undo(&amp;hellip;(x)&amp;hellip;))) = undo(x)
$$&lt;/li&gt;
&lt;li&gt;AI(后像)：事务更新时所涉及物理块更新后的映像；有后像即时更新数据丢失，仍可恢复到更新后状态，叫重做redo,也满足幂等性
$$
redo(redo(redo(&amp;hellip;(x)&amp;hellip;))) = redo(x)
$$&lt;/li&gt;
&lt;li&gt;事务状态：两种,commit了，说明事务已成功执行(all)；事务失败，则要消除事务对数据库影响(nothing)，叫卷回(abort/rollback)
数据库失效时，可取出最近副本，再根据运行记录
&lt;ul&gt;
&lt;li&gt;对已提交的事务&lt;strong&gt;用后像重做&lt;/strong&gt;，叫&lt;strong&gt;向前恢复&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;对未提交的事务&lt;strong&gt;用前像卷回&lt;/strong&gt;，叫&lt;strong&gt;向后恢复&lt;/strong&gt;
这样可使数据库恢复至最近的&lt;strong&gt;一致状态&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;运行记录结构&#34;&gt;
  运行记录结构
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%bf%90%e8%a1%8c%e8%ae%b0%e5%bd%95%e7%bb%93%e6%9e%84&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;活动事务表（ATL）：记录所有正在执行还没有提交的事务的标识符（TID）&lt;/li&gt;
&lt;li&gt;提交事务表（CTL）：记录所有已提交的事务的标识符&lt;/li&gt;
&lt;li&gt;日志&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;更新事务的执行与恢复&#34;&gt;
  更新事务的执行与恢复
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9b%b4%e6%96%b0%e4%ba%8b%e5%8a%a1%e7%9a%84%e6%89%a7%e8%a1%8c%e4%b8%8e%e6%81%a2%e5%a4%8d&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;两三条更新事务执行时原则&#34;&gt;
  两/三条更新事务执行时原则：
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%b8%a4%e4%b8%89%e6%9d%a1%e6%9b%b4%e6%96%b0%e4%ba%8b%e5%8a%a1%e6%89%a7%e8%a1%8c%e6%97%b6%e5%8e%9f%e5%88%99&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;提交规则：后像必须在事务提交前写入非易失存储设备（数据库或运行记录的后像文件中)&lt;/li&gt;
&lt;li&gt;先记后写规则： 若后像在事务提交前写入数据库，则必须把前像先记入运行记录&lt;/li&gt;
&lt;li&gt;前像和后像的幂等性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三种更新策略后像写入数据库的时机不同&#34;&gt;
  三种更新策略（后像写入数据库的时机不同）：
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%b8%89%e7%a7%8d%e6%9b%b4%e6%96%b0%e7%ad%96%e7%95%a5%e5%90%8e%e5%83%8f%e5%86%99%e5%85%a5%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e6%97%b6%e6%9c%ba%e4%b8%8d%e5%90%8c&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在事务提交前写入DB
&lt;ol&gt;
&lt;li&gt;TID$\rightarrow$ATL&lt;/li&gt;
&lt;li&gt;BI$\rightarrow$log [Log Ahead Rule]&lt;/li&gt;
&lt;li&gt;AI$\rightarrow$DB, log [Commit Rule]&lt;/li&gt;
&lt;li&gt;TID$\rightarrow$CTL&lt;/li&gt;
&lt;li&gt;rm TID from ATL&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能发生情况&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;CTL&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ATL&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;OP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Undo, rm TID from ATL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rm TID from ATL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;nothing to do&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;在事务提交后写入DB[所以根据先记后写原则，不必记入BI][现在流行]
&lt;ol&gt;
&lt;li&gt;TID$\rightarrow$ATL&lt;/li&gt;
&lt;li&gt;AI$\rightarrow$log [Commit Rule]&lt;/li&gt;
&lt;li&gt;TID$\rightarrow$CTL&lt;/li&gt;
&lt;li&gt;AI$\rightarrow$DB&lt;/li&gt;
&lt;li&gt;rm TID from ATL&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能发生情况&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;CTL&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ATL&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;OP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rm TID from ATL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;redo, rm TID from ATL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;nothing to do&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;在事务提交前后写入DB
&lt;ol&gt;
&lt;li&gt;TID$\rightarrow$ATL&lt;/li&gt;
&lt;li&gt;AI, BI$\rightarrow$log [Commit Rule]&lt;/li&gt;
&lt;li&gt;AI$\rightarrow$DB(partially done)&lt;/li&gt;
&lt;li&gt;TID$\rightarrow$CTL&lt;/li&gt;
&lt;li&gt;AI$\rightarrow$DB(completed)&lt;/li&gt;
&lt;li&gt;rm TID from ATL&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能发生情况&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;CTL&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ATL&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;OP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;undo, rm TID from ATL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;redo, rm TID from ATL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;nothing to do&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;46-并发控制&#34;&gt;
  4.6 并发控制
  &lt;a class=&#34;heading-link&#34; href=&#34;#46-%e5%b9%b6%e5%8f%91%e6%8e%a7%e5%88%b6&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;并发好处&#34;&gt;
  并发好处
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%b9%b6%e5%8f%91%e5%a5%bd%e5%a4%84&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Improving system utilization &amp;amp; response time.&lt;/li&gt;
&lt;li&gt;Different transcation may access to parts database.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;并发的问题&#34;&gt;
  并发的问题
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%b9%b6%e5%8f%91%e7%9a%84%e9%97%ae%e9%a2%98&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;丢失更新:两个事务同时对一个数据项更新，并发写入会有一个事务的更新被覆盖丢失。与两事务串行执行结果不同。write-write conflict&lt;/li&gt;
&lt;li&gt;读脏数据:一个事务对某个元组中两个属性进行更新，一个事务则读取这个元组，并发执行会让这个元组的两个属性不一致，比如一个已更新一个未更新。读取的是个不存在的元组。read-write conflict&lt;/li&gt;
&lt;li&gt;读值不可复现：一个事务读取一个数据两次，另一个事务并发修改了这个事务导致读取的两个数据不同。两事务若串行执行不会有此现象。这也是read-write conflict



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-26-15-51-11.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;并发一致性准则--串行化&#34;&gt;
  并发一致性准则&amp;ndash;串行化
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%b9%b6%e5%8f%91%e4%b8%80%e8%87%b4%e6%80%a7%e5%87%86%e5%88%99--%e4%b8%b2%e8%a1%8c%e5%8c%96&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;若两个事务集合并发执行的结果与串行执行的结果相同，则这个并发调度是可串行化的。&lt;/li&gt;
&lt;li&gt;判断是否可串行化的方法：前趋图
&lt;ul&gt;
&lt;li&gt;对于某个数据的读写操作i都在j之前完成，则可加一条$T_i \rightarrow T_j$



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-26-16-09-22.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;按照拓扑排序得到结点队列$T_1 \rightarrow T_3\rightarrow T_2\rightarrow T_4$



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-26-16-11-31.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;notice tip&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-lightbulb-o&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Tip
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;简单的说，每次把入度为0的结点如队列即可&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;加锁协议&#34;&gt;
  加锁协议
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8a%a0%e9%94%81%e5%8d%8f%e8%ae%ae&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;x锁排他锁&#34;&gt;
  X锁(排他锁)
  &lt;a class=&#34;heading-link&#34; href=&#34;#x%e9%94%81%e6%8e%92%e4%bb%96%e9%94%81&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;\&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;NL&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;X&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NL&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;sx锁&#34;&gt;
  (S,X)锁
  &lt;a class=&#34;heading-link&#34; href=&#34;#sx%e9%94%81&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;S锁加上后，可以读但不可写&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;\&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;NL&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;S&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;X&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NL&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;S&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;sux锁&#34;&gt;
  (S,U,X)锁
  &lt;a class=&#34;heading-link&#34; href=&#34;#sux%e9%94%81&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;S锁下可以加更新锁&lt;/li&gt;
&lt;li&gt;U锁下不可加更新锁&lt;/li&gt;
&lt;li&gt;反正开卷怕什么&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;\&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;NL&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;S&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;U&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;X&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NL&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;S&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;U&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;死锁和活锁&#34;&gt;
  死锁和活锁
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%ad%bb%e9%94%81%e5%92%8c%e6%b4%bb%e9%94%81&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;死锁：循环等待，没有事务可以得到需要的资源来完成事务&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;解决：预防不让它发生;解决（发生了但可解决它)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;活锁：别的事务一直占用资源，低优先级的一直拿不到资源&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;解决：FIFO策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;死锁检测&#34;&gt;
  死锁检测
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%ad%bb%e9%94%81%e6%a3%80%e6%b5%8b&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Timeout:若一个事务等待超过了设定的时间，则认为死锁发生，该事务应该被放弃&lt;/li&gt;
&lt;li&gt;循环等待图：出现回路则发生死锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;死锁避免&#34;&gt;
  死锁避免
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%ad%bb%e9%94%81%e9%81%bf%e5%85%8d&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;当事务申请锁未获准时不是一律等待，而是让一些事务卷回重执(retry),以避免循环等待。为区别事务开始执行的先后，给他们一个随时间增长的时间标记ts(time stamp)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;事务重执有两种策略
&lt;ul&gt;
&lt;li&gt;死亡-等待wait-die:年老的等年轻的事务,年轻的来了，则重执，一直到自己变得年老而等待&lt;/li&gt;
&lt;li&gt;击伤-等待wound-die:年轻的等年老的，年老的来了，把年轻的击败，年轻的重执时直接等待&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;第五章-数据库的安全性和完整性约束&#34;&gt;
  第五章 数据库的安全性和完整性约束
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ac%ac%e4%ba%94%e7%ab%a0-%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e5%ae%89%e5%85%a8%e6%80%a7%e5%92%8c%e5%ae%8c%e6%95%b4%e6%80%a7%e7%ba%a6%e6%9d%9f&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h1&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;系统的软硬件故障 【DBMS的恢复机制】&lt;/li&gt;
&lt;li&gt;用户的并发访问控制不当 【DBMS的并发控制】&lt;/li&gt;
&lt;li&gt;人为破坏 【数据库的安全性】&lt;/li&gt;
&lt;li&gt;数据库输入的数据不正确 【数据库的完整性约束】&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;51-数据库安全性&#34;&gt;
  5.1 数据库安全性
  &lt;a class=&#34;heading-link&#34; href=&#34;#51-%e6%95%b0%e6%8d%ae%e5%ba%93%e5%ae%89%e5%85%a8%e6%80%a7&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;保证数据库数据安全的措施&#34;&gt;
  保证数据库数据安全的措施
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%bf%9d%e8%af%81%e6%95%b0%e6%8d%ae%e5%ba%93%e6%95%b0%e6%8d%ae%e5%ae%89%e5%85%a8%e7%9a%84%e6%8e%aa%e6%96%bd&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;利用视图和查询修改&lt;/li&gt;
&lt;li&gt;访问控制（对用户进行分类来给不同的权限 ）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;普通用户&lt;/li&gt;
&lt;li&gt;DBA&lt;/li&gt;
&lt;li&gt;有资源特权的用户&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;用户标识和用户认证&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;通过password进行用户认证&lt;/li&gt;
&lt;li&gt;特殊的物品，如钥匙. IC卡等等&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;授权&lt;/li&gt;
&lt;li&gt;Role角色机制（通过该方法提高权限控制）&lt;/li&gt;
&lt;li&gt;数据加密&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;加密后存储【密码学】，但是加密解密影响效率&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;审计追踪&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;结合数据库日志，可以在关注的对象上添加审计追踪，会记录该对象上进行的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;52-数据库的完整性约束&#34;&gt;
  5.2 数据库的完整性约束
  &lt;a class=&#34;heading-link&#34; href=&#34;#52-%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e5%ae%8c%e6%95%b4%e6%80%a7%e7%ba%a6%e6%9d%9f&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;完整性约束就是规则，一张表内所有元组都要满足的条件就是完整性约束&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;完整性约束的分类&#34;&gt;
  完整性约束的分类
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%ae%8c%e6%95%b4%e6%80%a7%e7%ba%a6%e6%9d%9f%e7%9a%84%e5%88%86%e7%b1%bb&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;静态约束
&lt;ul&gt;
&lt;li&gt;固有约束：数据模型固有的约束，如关系属性应该是原子的,即第一范式&lt;/li&gt;
&lt;li&gt;隐含约束：数据库表的模式定义里面的约束,一般用DDL语句说明，如：域约束、实体完整性约束、外键约束【引用完整性约束】&lt;/li&gt;
&lt;li&gt;显式约束：书p181,没解释清&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态约束
&lt;ul&gt;
&lt;li&gt;数据库在状态转换中要满足的约束叫做动态约束(可以和触发器联系)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;完整性约束的说明&#34;&gt;
  完整性约束的说明
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%ae%8c%e6%95%b4%e6%80%a7%e7%ba%a6%e6%9d%9f%e7%9a%84%e8%af%b4%e6%98%8e&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用过程说明：把约束的说明和检验交给应用程序&lt;/li&gt;
&lt;li&gt;用断言说明：断言指数据库状态必须满足的逻辑条件&lt;/li&gt;
&lt;li&gt;在基表定义中加入&lt;code&gt;CHECK&lt;/code&gt;子句约束&lt;/li&gt;
&lt;li&gt;用触发子表示约束,下小节细讲&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;53-触发子triggers&#34;&gt;
  5.3 触发子(Triggers)
  &lt;a class=&#34;heading-link&#34; href=&#34;#53-%e8%a7%a6%e5%8f%91%e5%ad%90triggers&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;主动数据库：能对数据库采取一些主动的动作。
&lt;ul&gt;
&lt;li&gt;数据库的主动依赖于规则
&lt;ul&gt;
&lt;li&gt;规则：ECA规则，E为事件、C为条件、A为动作。&lt;/li&gt;
&lt;li&gt;即当事件A发生，且条件C满足时，采取A动作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;组成&#34;&gt;
  组成
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%bb%84%e6%88%90&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Event: activates the trigger&lt;/li&gt;
&lt;li&gt;Condition: tests whether the triggers should run&lt;/li&gt;
&lt;li&gt;Action: what happens if the trigger runs&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;
  实例
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%ae%9e%e4%be%8b&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TRIGGER&lt;/span&gt; youngSailorUpdate          &lt;span style=&#34;color:#6272a4&#34;&gt;--声明触发器
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;AFTER&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;ON&lt;/span&gt; SALORS                    &lt;span style=&#34;color:#6272a4&#34;&gt;--Event
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;REFERENCING&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NEW&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TABLE&lt;/span&gt; NewSailors          &lt;span style=&#34;color:#6272a4&#34;&gt;--对水手表新插入的元组看成一张表
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;FOR&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;EACH&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;STATEMENT&lt;/span&gt;                        &lt;span style=&#34;color:#6272a4&#34;&gt;--触发行为
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;INSERT&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;INTO&lt;/span&gt; YoungSailor(sid, name, age, rating)
  &lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; sid, name, age, rating
  &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; NewSailors N
  &lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; N.age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;触发器的执行策略&#34;&gt;
  触发器的执行策略
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%a7%a6%e5%8f%91%e5%99%a8%e7%9a%84%e6%89%a7%e8%a1%8c%e7%ad%96%e7%95%a5&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;立即执行【常用】
&lt;ul&gt;
&lt;li&gt;当事件发生时立刻去检查条件是否满足&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;延迟执行
&lt;ul&gt;
&lt;li&gt;等事务要提交时执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分离执行
&lt;ul&gt;
&lt;li&gt;把ECA规则中的动作单独作为一个事务，作为原来事务的衍生事务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;第六章-数据库设计&#34;&gt;
  第六章 数据库设计
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ac%ac%e5%85%ad%e7%ab%a0-%e6%95%b0%e6%8d%ae%e5%ba%93%e8%ae%be%e8%ae%a1&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;数据依赖&#34;&gt;
  数据依赖
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e4%be%9d%e8%b5%96&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;关系数据库内数据之间存在一定的数据依赖关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;函数依赖fd&#34;&gt;
  函数依赖FD
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%87%bd%e6%95%b0%e4%be%9d%e8%b5%96fd&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个属性的值可以唯一的决定其它属性的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多值依赖mvd&#34;&gt;
  多值依赖MVD
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%a4%9a%e5%80%bc%e4%be%9d%e8%b5%96mvd&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个属性的值决定其它属性的一组值&lt;/li&gt;
&lt;li&gt;实际生活存在但很少&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;连接依赖jd&#34;&gt;
  连接依赖JD
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%bf%9e%e6%8e%a5%e4%be%9d%e8%b5%96jd&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;关系属性之间能够无损连接
&lt;ul&gt;
&lt;li&gt;无损连接：连接后的元组数一个不多，一个不少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实际生活存在但很少&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;61-关系模式的规范化&#34;&gt;
  6.1 关系模式的规范化
  &lt;a class=&#34;heading-link&#34; href=&#34;#61-%e5%85%b3%e7%b3%bb%e6%a8%a1%e5%bc%8f%e7%9a%84%e8%a7%84%e8%8c%83%e5%8c%96&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;关系模式的范式理论&#34;&gt;
  关系模式的范式理论
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%85%b3%e7%b3%bb%e6%a8%a1%e5%bc%8f%e7%9a%84%e8%8c%83%e5%bc%8f%e7%90%86%e8%ae%ba&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;1-nf-一范式&#34;&gt;
  1 NF 一范式
  &lt;a class=&#34;heading-link&#34; href=&#34;#1-nf-%e4%b8%80%e8%8c%83%e5%bc%8f&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不支持表中套表&lt;/li&gt;
&lt;li&gt;关系中的每一个元组必须是原子【即不可再分】&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-nf-二范式&#34;&gt;
  2 NF 二范式
  &lt;a class=&#34;heading-link&#34; href=&#34;#2-nf-%e4%ba%8c%e8%8c%83%e5%bc%8f&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据库设计时，设计出来的表满足一范式，并且该表内不存在属性对主键的部分函数依赖。&lt;/li&gt;
&lt;li&gt;例子：若属性由（学号、姓名、班级、课程号、成绩）五个属性组成，其中（学号，课程号）共同组成主键。
&lt;ul&gt;
&lt;li&gt;此时不满足二范式。&lt;/li&gt;
&lt;li&gt;其中的姓名和班级，只需要依赖主键中的学号就可以得到。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;不满足2范式容易出现的问题：
&lt;ul&gt;
&lt;li&gt;插入异常
&lt;ul&gt;
&lt;li&gt;上例中，不能插入一个还未选课的学生的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除异常
&lt;ul&gt;
&lt;li&gt;上例中，如果一个学生申请休学，把选过的课退了，那么他的信息也会被删除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更新异常
&lt;ul&gt;
&lt;li&gt;更新中难以保持数据的一致性，上例的设计有大量的数据冗余&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解决方法&#34;&gt;
  解决方法
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;设计时，一视一地。
&lt;ul&gt;
&lt;li&gt;一张表只管一件事情&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-nf-三范式&#34;&gt;
  3 NF 三范式
  &lt;a class=&#34;heading-link&#34; href=&#34;#3-nf-%e4%b8%89%e8%8c%83%e5%bc%8f&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在满足二范式的前提下，不存在属性对主键的传递依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;例子&#34;&gt;
  例子
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%be%8b%e5%ad%90&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;若属性由（职工编号、工资级别、工资）三个属性组成，其中（职工编号）为主键。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分析&#34;&gt;
  分析
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%88%86%e6%9e%90&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;工资取决于工资级别，取决于职工编号&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;上例不满足3范式的问题&#34;&gt;
  上例不满足3范式的问题
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%b8%8a%e4%be%8b%e4%b8%8d%e6%bb%a1%e8%b6%b33%e8%8c%83%e5%bc%8f%e7%9a%84%e9%97%ae%e9%a2%98&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;插入异常：当一个人的工资级别还没定的时候，他对应的工资也没有&lt;/li&gt;
&lt;li&gt;删除异常：若只是删除一个员工的工资信息时，会把对应的工资级别信息也删除了&lt;/li&gt;
&lt;li&gt;更新异常：数据内有大量的冗余&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解决方法-1&#34;&gt;
  解决方法
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95-1&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;设计时，一视一地。
&lt;ul&gt;
&lt;li&gt;一张表只管一件事情&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-nf-四范式&#34;&gt;
  4 NF 四范式
  &lt;a class=&#34;heading-link&#34; href=&#34;#4-nf-%e5%9b%9b%e8%8c%83%e5%bc%8f&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在满足三范式的前提下，消除多值依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-nf-五范式&#34;&gt;
  5 NF 五范式
  &lt;a class=&#34;heading-link&#34; href=&#34;#5-nf-%e4%ba%94%e8%8c%83%e5%bc%8f&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在满足四范式的前提下，消除连接依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;62-数据库设计方法&#34;&gt;
  6.2 数据库设计方法
  &lt;a class=&#34;heading-link&#34; href=&#34;#62-%e6%95%b0%e6%8d%ae%e5%ba%93%e8%ae%be%e8%ae%a1%e6%96%b9%e6%b3%95&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;面向过程的方法&#34;&gt;
  面向过程的方法
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%9d%a2%e5%90%91%e8%bf%87%e7%a8%8b%e7%9a%84%e6%96%b9%e6%b3%95&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;根据单位日常处理的流程，以过程为中心。
&lt;ul&gt;
&lt;li&gt;好处
&lt;ul&gt;
&lt;li&gt;在设计初期，能比较快的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;没分析数据之间的关系，数据由冗余和矛盾，当流程进行改动时，会有很多问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面向对象的方法&#34;&gt;
  面向对象的方法
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%9a%84%e6%96%b9%e6%b3%95&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以数据为中心的方法&lt;/li&gt;
&lt;li&gt;分析数据之间的关系，设计一些符合3NF的模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;63-数据库设计流程&#34;&gt;
  6.3 数据库设计流程
  &lt;a class=&#34;heading-link&#34; href=&#34;#63-%e6%95%b0%e6%8d%ae%e5%ba%93%e8%ae%be%e8%ae%a1%e6%b5%81%e7%a8%8b&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;需求分析，与用户交流确定需求&lt;/li&gt;
&lt;li&gt;概念设计，分析数据之间的关系、实体及实体间的逻辑&lt;/li&gt;
&lt;li&gt;逻辑设计，看采用的数据库系统，生成基表&lt;/li&gt;
&lt;li&gt;物理设计，考虑数据在内存上到底如何存储&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;各阶段主要工作&#34;&gt;
  各阶段主要工作
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%90%84%e9%98%b6%e6%ae%b5%e4%b8%bb%e8%a6%81%e5%b7%a5%e4%bd%9c&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;需求分析阶段&#34;&gt;
  需求分析阶段
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%9c%80%e6%b1%82%e5%88%86%e6%9e%90%e9%98%b6%e6%ae%b5&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据字典
&lt;ul&gt;
&lt;li&gt;把所有的基本数据元素都找出来
&lt;ul&gt;
&lt;li&gt;解决问题：
&lt;ul&gt;
&lt;li&gt;名字冲突：同名异意&lt;/li&gt;
&lt;li&gt;概念冲突&lt;/li&gt;
&lt;li&gt;域冲突&lt;/li&gt;
&lt;li&gt;编码问题
&lt;ul&gt;
&lt;li&gt;压缩信息&lt;/li&gt;
&lt;li&gt;基本信息&lt;/li&gt;
&lt;li&gt;实体识别&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;概念设计阶段&#34;&gt;
  概念设计阶段
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%a6%82%e5%bf%b5%e8%ae%be%e8%ae%a1%e9%98%b6%e6%ae%b5&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用ER图抽象出实体&lt;/li&gt;
&lt;li&gt;哪些数据项抽象成实体&lt;/li&gt;
&lt;li&gt;实体间的联系&lt;/li&gt;
&lt;li&gt;相关ER图工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;逻辑设计阶段&#34;&gt;
  逻辑设计阶段
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%80%bb%e8%be%91%e8%ae%be%e8%ae%a1%e9%98%b6%e6%ae%b5&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;把ER图表达的数据模型进行建表&lt;/li&gt;
&lt;li&gt;表和属性的命名规则&lt;/li&gt;
&lt;li&gt;逆规范化&lt;/li&gt;
&lt;li&gt;定义视图&lt;/li&gt;
&lt;li&gt;考虑遗留系统的表的设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;物理设计阶段&#34;&gt;
  物理设计阶段
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%89%a9%e7%90%86%e8%ae%be%e8%ae%a1%e9%98%b6%e6%ae%b5&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;根据DBMS特点对每个表的存储和索引情况进行权衡&lt;/li&gt;
&lt;li&gt;分区设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;
  总结
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%80%bb%e7%bb%93&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;仅仅在结构上满足3范式是不够的&lt;/li&gt;
&lt;li&gt;一事一地包括每项信息的唯一，要提取出问题的本质，识别本质上同一概念的信息项&lt;/li&gt;
&lt;li&gt;对于表达类似信息、能合并尽量合并&lt;/li&gt;
&lt;li&gt;考虑到效率、用途等因素、该分开的要分开&lt;/li&gt;
&lt;li&gt;结合DBMS内部实现技术，合理设计索引和文件结构，为查询优化准备号存取路径&lt;/li&gt;
&lt;li&gt;在结构规范化、减少数据冗余和提高数据库访问性能之间仔细权衡，适当折中&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Data Stuctrue Tutor1</title>
      <link>http://acupofair.github.io/posts/data_structure/chp1/</link>
      <pubDate>Thu, 02 Dec 2021 11:04:51 +0800</pubDate>
      
      <guid>http://acupofair.github.io/posts/data_structure/chp1/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;There will be the datastucture tutor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;😄&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vim配置(linux)</title>
      <link>http://acupofair.github.io/posts/vim/init/</link>
      <pubDate>Tue, 30 Nov 2021 23:03:11 +0800</pubDate>
      
      <guid>http://acupofair.github.io/posts/vim/init/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这篇文章将介绍vim在archlinux中的配置，它包含了无gui环境无任何插件的简单配置，以及稍微复杂但不失轻便的带有插件的配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;


&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/cover.png&#34; alt=&#34;cover&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;h1 id=&#34;archlinux中vim的配置&#34;&gt;
  archlinux中vim的配置
  &lt;a class=&#34;heading-link&#34; href=&#34;#archlinux%e4%b8%advim%e7%9a%84%e9%85%8d%e7%bd%ae&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h1&gt;
&lt;h2 id=&#34;基础配置&#34;&gt;
  基础配置
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%9f%ba%e7%a1%80%e9%85%8d%e7%bd%ae&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;如果你是在一个没有桌面的环境下想有个良好的vim体验，只需简单两步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拉下我的代码,curl是linux下net-tools包里的,arch下&lt;code&gt;sudo pacman -S net-tools&lt;/code&gt;即可安装. &lt;code&gt;-o&lt;/code&gt;参数后为拉下来的网页保存为的文件名,下面代码是将我寄存于github上的vim配置文件下下来并保存到temp.vim这个文件中,至于为什么不直接保存到&lt;code&gt;~/.vimrc&lt;/code&gt;下,因为我没试过，and此时此刻&lt;strong&gt;懒得&lt;/strong&gt;试。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl https://raw.githubusercontent.com/ACupofAir/scripts/main/vimscripts/vim_next_ngui.vim -o temp.vim
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当然如果你是在中国，又恰巧忘记给终端配置代理，那你可能会遇到&lt;/p&gt;
&lt;p&gt;


&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2021-12-01-21-50-01.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;只需简单的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;http_proxy&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;your_proxy_ip:port; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;https_proxy&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;your_proxy_ip:port
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;然后把这个&lt;code&gt;temp.vim&lt;/code&gt;文件拷贝到你的个人根目录的&lt;code&gt;.vimrc&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cp temp.vim ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后可以把&lt;code&gt;temp.vim&lt;/code&gt;删掉了&lt;/p&gt;
&lt;p&gt;下面介绍一下这套基础配置带来的一些关键功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;相对行号&lt;/strong&gt;  这个在可以比较直观的显示你目前键入位置，同时这个相对行号在复制多行代码时也比较有用，自己肉眼看有时候会数错&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;语法高亮&lt;/strong&gt;  默认情况下在tty中貌似不开的，得手动开&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;智能搜索&lt;/strong&gt; 就是你输入全小写的，则他会匹配大小写都有的，但你输入一个大写字符，它就会变得大小写敏感&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置了一些常用快捷键&lt;/strong&gt; 首先把&lt;!-- raw HTML omitted --&gt;配置为空格键&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;快捷键&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;leader&amp;gt; e&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;打开vim自带的文件树&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;leader&amp;gt; nh&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;:nohl&lt;/code&gt;快速取消高亮&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;leader&amp;gt; q&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不保存退出文件(因为人类的手指真的很不适合连按&lt;code&gt;q&lt;/code&gt;和&lt;code&gt;！&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;leader&amp;gt; rn&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;*Ncgn&lt;/code&gt;,这个很体现vim的牛皮之处，&lt;code&gt;*&lt;/code&gt;选中当前单词的所有匹配项，并将光标移到下一个匹配项，&lt;code&gt;N&lt;/code&gt;则反向跳转到上一个匹配项，也就是你一开始按&lt;code&gt;*&lt;/code&gt;的位置，然后&lt;code&gt;cgn&lt;/code&gt;改变这个单词，然后下面按&lt;code&gt;.&lt;/code&gt;重复上述操作就可以执行让一个操作，也就是改变下一个匹配的单词为上一个你改成的单词,说人话就是匹配修改相同单词变量，按&lt;code&gt;.&lt;/code&gt;修改下一个，不解释自行体会&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;leader&amp;gt; m&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;写了个无聊的函数用于控制是否允许鼠标操作，应该是当时老误触写的，后来用发现kde有个打字时自动禁用触摸板的设置，就没怎么用过&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;还有一些小功能，比如窗口调整大小，用到这地步自己看看代码也就明白了，不解释。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;高级配置&#34;&gt;
  高级配置
  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%ab%98%e7%ba%a7%e9%85%8d%e7%bd%ae&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;您就将就着我的&lt;a href=&#34;https://github.com/ACupofAir/dotfiles/blob/main/vimrc&#34;&gt;配置文件&lt;/a&gt;看看吧，都玩vim了肯定要自己玩才有意思嘛。&lt;/p&gt;
&lt;p&gt;最后给个让人眼馋的成品图



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;../res/2022-01-13-17-15-42.png&#34; alt=&#34;&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>http://acupofair.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://acupofair.github.io/about/</guid>
      <description>&lt;h3 id=&#34;hi-there-&#34;&gt;
  Hi there 👋
  &lt;a class=&#34;heading-link&#34; href=&#34;#hi-there-&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h3&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;                       _                        _
                      | |       ___            &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;_&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
  __ _   _ __    ___  | |__    &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt; _ &lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;   __   __  _   _ __ ___
 / _&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt; | | &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;__|  / __| | &amp;#39;&lt;/span&gt;_ &lt;span style=&#34;color:#f1fa8c&#34;&gt;\ &lt;/span&gt;  / _ &lt;span style=&#34;color:#f1fa8c&#34;&gt;\/\ \ \ &lt;/span&gt;/ / | | | &amp;#39;_ &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt; _ &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;| &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;_| | | |    | &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;__  | | | | | &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;_&amp;gt;  &amp;lt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;\ &lt;/span&gt;V /  | | | | | | | |
 &lt;span style=&#34;color:#f1fa8c&#34;&gt;\_&lt;/span&gt;_,_| |_|     &lt;span style=&#34;color:#f1fa8c&#34;&gt;\_&lt;/span&gt;__| |_| |_|  &lt;span style=&#34;color:#f1fa8c&#34;&gt;\_&lt;/span&gt;__/&lt;span style=&#34;color:#f1fa8c&#34;&gt;\/&lt;/span&gt;   &lt;span style=&#34;color:#f1fa8c&#34;&gt;\_&lt;/span&gt;/   |_| |_| |_| |_|
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;🔰 I maybe a full-stack developer 🤦&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;👨‍🎓 I’m currently studying software engineer in SEU.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🌱 I’m currently using arch, vim, vscode&amp;hellip;etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;👯 I’m looking to collaborate on ui&amp;amp;icon design.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🔭 My skills



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;https://img.shields.io/badge/verteran-qt-red&#34; alt=&#34;qt&#34;&gt;
  
&lt;/p&gt;



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;https://img.shields.io/badge/verteran-basic--datastructure-red&#34; alt=&#34;basic datastructure&#34;&gt;
  
&lt;/p&gt;



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;https://img.shields.io/badge/verteran-linux-red&#34; alt=&#34;linux shell&#34;&gt;
  
&lt;/p&gt;



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;https://img.shields.io/badge/worker-sping--boot-blue&#34; alt=&#34;spring-boot&#34;&gt;
  
&lt;/p&gt;



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;https://img.shields.io/badge/worker-mybatis-blue&#34; alt=&#34;mybatis&#34;&gt;
  
&lt;/p&gt;



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;https://img.shields.io/badge/worker-android-blue&#34; alt=&#34;android&#34;&gt;
  
&lt;/p&gt;



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;https://img.shields.io/badge/worker-vue-blue&#34; alt=&#34;vue&#34;&gt;
  
&lt;/p&gt;



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;https://img.shields.io/badge/worker-basic--algorithm-blue&#34; alt=&#34;basic algorithm&#34;&gt;
  
&lt;/p&gt;



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;https://img.shields.io/badge/newcomer-ML--DL--NN-green&#34; alt=&#34;ML DL NN&#34;&gt;
  
&lt;/p&gt;



&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;https://img.shields.io/badge/learner-electron-yellow&#34; alt=&#34;electron&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;💻 My github stats&lt;/p&gt;
&lt;p&gt;


&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;https://github-readme-stats.vercel.app/api?username=acupofair&amp;amp;show_icons=true&amp;amp;theme=radical&#34; alt=&#34;ACupofAir&amp;amp;rsquo;s GitHub stats&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;💘 My Preferred language&lt;/p&gt;
&lt;p&gt;


&lt;p class=&#34;md__image&#34;&gt;
  
  &lt;img src=&#34;https://github-readme-stats.vercel.app/api/top-langs/?username=acupofair&amp;amp;layout=compact&amp;amp;langs_count=10&amp;amp;show_icons=true&amp;amp;theme=radical&#34; alt=&#34;ACupofAir&amp;amp;rsquo;s Most used languages&#34;&gt;
  
&lt;/p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📽️ Projects&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/ACupofAir/zhishe&#34;&gt;zhishe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/ACupofAir/Stoichiometric&#34;&gt;chemistry calulate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;&#34;&gt;filter-app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🌐 Contact Me&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;📫 &lt;a href=&#34;mailto:thoughts.times@gmail.com&#34;&gt;thoughts.times@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;👊 👊 👊&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;___  ___ __   __    ______  ______   _____   _____   _   _  ______   _____  
&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;  \&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; \ \ &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/    |  ___| | ___ \ |_   _| |  ___| | \ | | |  _  \ /&lt;/span&gt;  ___&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; 
&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; .  . &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;  \ V &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;     &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;_    &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;_&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; /   | |   | |__   |  \| | | | | | \ `--.  
&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;\&lt;span style=&#34;color:#ff79c6&#34;&gt;/|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;   \ &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;  _&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;    /    | |   |  __|  | . ` | | | | |  `--. \ 
&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;     &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;\ \   _&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;_  &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;___  &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;\  &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/ /&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;\__&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; / 
\_&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;_&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;   \_&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;      \_&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;     \_&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; \_&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;  \___&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;  \____&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;  \_&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; \_&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;___&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;   \____&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://thisisbadbao.github.io&#34;&gt;BadBao&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leibudao.github.io&#34;&gt;Run&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>